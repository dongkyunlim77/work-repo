[
    {
        "state": {
            "submission_history": "def cookingClass(date, isWeekend):\n    if date % 2 == 1 and isWeekend == True:\n        return \"Let's check if there is a cooking class on day {}!\".format(date)\n    elif date % 2 == 0 and isWeekend == True:\n        return \"Let's go cooking on day {}!\".format(date)\n    elif date % 2 == 1 and isWeekend == False:\n        return \"Let's go cooking on day {}!\".format(date)\n    else:\n        return \"Let's plan for some other day.\"\n        ",
            "durations": 279.966,
            "keystrokes": 521,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 2,
            "current_problem": 13
        },
        "action": 12,
        "next_state": {
            "submission_history": "def toCook(numClasses, diningDollars):\n    if numClasses > 3 and diningDollars > 10:\n        return \"Let's get Panda Express!\"\n    elif numClasses <= 3 and diningDollars >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 136.267,
            "keystrokes": 308,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 2,
            "current_problem": 12
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def toCook(numClasses, diningDollars):\n    if numClasses > 3 and diningDollars > 10:\n        return \"Let's get Panda Express!\"\n    elif numClasses <= 3 and diningDollars >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 136.267,
            "keystrokes": 308,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 2,
            "current_problem": 12
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(orderNumbers, orderLength):\n    oLen1 = 0\n    i1 = 0\n    i2 = 0\n    for i in range(len(orderNumbers)):\n        if orderNumbers[i] == 1 and i1 == 0:\n            i1 = i\n        elif orderNumbers[i] == 1 and i1 != 0:\n            i2 = i\n    oLen1 = i2 - i1\n    if oLen1 < orderLength or oLen1 == 0:\n        return 'Slow day today!'\n    else:\n        return orderNumbers[i1:i2+1]\n        ",
            "durations": 424.051,
            "keystrokes": 483,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(orderNumbers, orderLength):\n    oLen1 = 0\n    i1 = 0\n    i2 = 0\n    for i in range(len(orderNumbers)):\n        if orderNumbers[i] == 1 and i1 == 0:\n            i1 = i\n        elif orderNumbers[i] == 1 and i1 != 0:\n            i2 = i\n    oLen1 = i2 - i1\n    if oLen1 < orderLength or oLen1 == 0:\n        return 'Slow day today!'\n    else:\n        return orderNumbers[i1:i2+1]\n        ",
            "durations": 424.051,
            "keystrokes": 483,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(orderNumbers, orderLength):\n    orderNumbers = str(orderNumbers)\n    oLen1 = 0\n    i1 = 0\n    i2 = 0\n    for i in range(len(orderNumbers)):\n        if orderNumbers[i] == 1 and i1 == 0:\n            i1 = i\n        elif orderNumbers[i] == 1 and i1 != 0:\n            i2 = i\n    oLen1 = i2 - i1\n    if oLen1 < orderLength or oLen1 == 0:\n        return 'Slow day today!'\n    else:\n        return orderNumbers[i1:i2+1]\n        ",
            "durations": 533.884,
            "keystrokes": 524,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(orderNumbers, orderLength):\n    orderNumbers = str(orderNumbers)\n    oLen1 = 0\n    i1 = 0\n    i2 = 0\n    for i in range(len(orderNumbers)):\n        if orderNumbers[i] == 1 and i1 == 0:\n            i1 = i\n        elif orderNumbers[i] == 1 and i1 != 0:\n            i2 = i\n    oLen1 = i2 - i1\n    if oLen1 < orderLength or oLen1 == 0:\n        return 'Slow day today!'\n    else:\n        return orderNumbers[i1:i2+1]\n        ",
            "durations": 533.884,
            "keystrokes": 524,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 16
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = \"\"\n    for i in range(len(jumbledMessage)):\n        if i % 2 == 0 and jumbledMessage[i].isalpha():\n            unscrambledMessage = unscrambledMessage + jumbledMessage[i]\n    return unscrambledMessage",
            "durations": 173.76,
            "keystrokes": 291,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = \"\"\n    for i in range(len(jumbledMessage)):\n        if i % 2 == 0 and jumbledMessage[i].isalpha():\n            unscrambledMessage = unscrambledMessage + jumbledMessage[i]\n    return unscrambledMessage",
            "durations": 173.76,
            "keystrokes": 291,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 14
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    for i in range(len(directions)):\n        try:\n            if directions[i] == 'L':\n                print('Turn Right!')\n            elif directions[i] == 'R':\n                print('Turn Left!')\n            elif directions[i] == 'W':\n                return 'Poseidon is my dad?!'\n        except:\n            return 'Made it back!'\n        ",
            "durations": 339.923,
            "keystrokes": 529,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    for i in range(len(directions)):\n        try:\n            if directions[i] == 'L':\n                print('Turn Right!')\n            elif directions[i] == 'R':\n                print('Turn Left!')\n            elif directions[i] == 'W':\n                return 'Poseidon is my dad?!'\n        except:\n            return 'Made it back!'\n        ",
            "durations": 339.923,
            "keystrokes": 529,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    lenC = 0\n    for i in range(len(directions)):\n        if lenC == len(directions):\n            return 'Made it back!'\n        if directions[i] == 'L':\n            print('Turn Right!')\n            lenC += 1\n        elif directions[i] == 'R':\n            print('Turn Left!')\n            lenC += 1\n        elif directions[i] == 'W':\n            return 'Poseidon is my dad?!'\n        ",
            "durations": 561.825,
            "keystrokes": 771,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    lenC = 0\n    for i in range(len(directions)):\n        if lenC == len(directions):\n            return 'Made it back!'\n        if directions[i] == 'L':\n            print('Turn Right!')\n            lenC += 1\n        elif directions[i] == 'R':\n            print('Turn Left!')\n            lenC += 1\n        elif directions[i] == 'W':\n            return 'Poseidon is my dad?!'\n        ",
            "durations": 561.825,
            "keystrokes": 771,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    lenC = 0\n    for i in range(len(directions) + 1):\n        if lenC == len(directions):\n            return 'Made it back!'\n        if directions[i] == 'L':\n            print('Turn Right!')\n            lenC += 1\n        elif directions[i] == 'R':\n            print('Turn Left!')\n            lenC += 1\n        elif directions[i] == 'W':\n            return 'Poseidon is my dad?!'\n        ",
            "durations": 716.678,
            "keystrokes": 775,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    lenC = 0\n    for i in range(len(directions) + 1):\n        if lenC == len(directions):\n            return 'Made it back!'\n        if directions[i] == 'L':\n            print('Turn Right!')\n            lenC += 1\n        elif directions[i] == 'R':\n            print('Turn Left!')\n            lenC += 1\n        elif directions[i] == 'W':\n            return 'Poseidon is my dad?!'\n        ",
            "durations": 716.678,
            "keystrokes": 775,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 5,
            "current_problem": 15
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = \"\"\n    for i in range(len(encryptedMessage)):\n        if i % key == 0:\n            decryptedMessage = decryptedMessage + encryptedMessage[i]\n    decryptedMessage = decryptedMessage[::-1]\n    return decryptedMessage",
            "durations": 137.237,
            "keystrokes": 358,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = \"\"\n    for i in range(len(encryptedMessage)):\n        if i % key == 0:\n            decryptedMessage = decryptedMessage + encryptedMessage[i]\n    decryptedMessage = decryptedMessage[::-1]\n    return decryptedMessage",
            "durations": 137.237,
            "keystrokes": 358,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 9,
            "current_problem": 18
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(loveLetter):\n    uCount = 0\n    lCount = 0\n    for char in loveLetter:\n        if char.isalpha() == False:\n            continue\n        else:\n            if char.islower():\n                lCount += 1\n            elif char.isupper():\n                uCount += 1\n    if uCount == lCount:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif uCount < lCount:\n        return \"Sweetheart, I need {} more uppercase character(s) in our love tale.\".format(str(lCount - uCount))\n    else:\n        \"Darling, I need {} more lowercase character(s) in our love story.\".format(str(uCount - lCount))\n\n\n        ",
            "durations": 336.118,
            "keystrokes": 897,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(loveLetter):\n    uCount = 0\n    lCount = 0\n    for char in loveLetter:\n        if char.isalpha() == False:\n            continue\n        else:\n            if char.islower():\n                lCount += 1\n            elif char.isupper():\n                uCount += 1\n    if uCount == lCount:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif uCount < lCount:\n        return \"Sweetheart, I need {} more uppercase character(s) in our love tale.\".format(str(lCount - uCount))\n    else:\n        \"Darling, I need {} more lowercase character(s) in our love story.\".format(str(uCount - lCount))\n\n\n        ",
            "durations": 336.118,
            "keystrokes": 897,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 9,
            "current_problem": 17
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(loveLetter):\n    uCount = 0\n    lCount = 0\n    for char in loveLetter:\n        if char.isalpha() == False:\n            continue\n        else:\n            if char.islower():\n                lCount += 1\n            elif char.isupper():\n                uCount += 1\n    if uCount == lCount:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif uCount < lCount:\n        return \"Sweetheart, I need {} more uppercase character(s) in our love tale.\".format(str(lCount - uCount))\n    else:\n        return \"Darling, I need {} more lowercase character(s) in our love story.\".format(str(uCount - lCount))\n\n\n        ",
            "durations": 379.944,
            "keystrokes": 904,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(loveLetter):\n    uCount = 0\n    lCount = 0\n    for char in loveLetter:\n        if char.isalpha() == False:\n            continue\n        else:\n            if char.islower():\n                lCount += 1\n            elif char.isupper():\n                uCount += 1\n    if uCount == lCount:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif uCount < lCount:\n        return \"Sweetheart, I need {} more uppercase character(s) in our love tale.\".format(str(lCount - uCount))\n    else:\n        return \"Darling, I need {} more lowercase character(s) in our love story.\".format(str(uCount - lCount))\n\n\n        ",
            "durations": 379.944,
            "keystrokes": 904,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 9,
            "current_problem": 17
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for cand in candidates:\n        if cand[1] == favCity and cand[2] in favColors:\n            matches.append(cand[0])\n    return matches",
            "durations": 144.569,
            "keystrokes": 219,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for cand in candidates:\n        if cand[1] == favCity and cand[2] in favColors:\n            matches.append(cand[0])\n    return matches",
            "durations": 144.569,
            "keystrokes": 219,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 19
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for cand in candidates:\n        if cand[1] == favCity and cand[2] in favColors:\n            matches.append(cand[0])\n    matches.sort()\n    return matches",
            "durations": 160.954,
            "keystrokes": 254,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for cand in candidates:\n        if cand[1] == favCity and cand[2] in favColors:\n            matches.append(cand[0])\n    matches.sort()\n    return matches",
            "durations": 160.954,
            "keystrokes": 254,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 19
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    sharedRestaurants = []\n    for place in yourList:\n        if place in friendList:\n            sharedRestaurants.append(place)\n    sharedRestaurants.sort()\n    if len(sharedRestaurants) == 0:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sharedRestaurants",
            "durations": 111.599,
            "keystrokes": 363,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    sharedRestaurants = []\n    for place in yourList:\n        if place in friendList:\n            sharedRestaurants.append(place)\n    sharedRestaurants.sort()\n    if len(sharedRestaurants) == 0:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sharedRestaurants",
            "durations": 111.599,
            "keystrokes": 363,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inventions):\n    completed = 0\n    for invention in inventions:\n        if invention[1] == True:\n            completed += 1\n    if completed != 0:\n        return completed\n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 106.587,
            "keystrokes": 300,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions):\n    completed = 0\n    for invention in inventions:\n        if invention[1] == True:\n            completed += 1\n    if completed != 0:\n        return completed\n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 106.587,
            "keystrokes": 300,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 20
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 139.905,
            "keystrokes": 255,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 139.905,
            "keystrokes": 255,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 139.905,
            "keystrokes": 255,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 139.905,
            "keystrokes": 255,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0][] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 182.454,
            "keystrokes": 329,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0][] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 182.454,
            "keystrokes": 329,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0][] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 182.454,
            "keystrokes": 329,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0][] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 182.454,
            "keystrokes": 329,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 192.514,
            "keystrokes": 332,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 192.514,
            "keystrokes": 332,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 192.514,
            "keystrokes": 332,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append((name, time))\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 192.514,
            "keystrokes": 332,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append([name, time])\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 223.615,
            "keystrokes": 336,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append([name, time])\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 223.615,
            "keystrokes": 336,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append([name, time])\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 223.615,
            "keystrokes": 336,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for time, name in unorganizedTimeList:\n        time.sort()\n        time = [time[0]] + [time[1]]\n        organizedTimeList.append([name, time])\n    organizedTimeList.sort()\n    return organizedTimeList\n        ",
            "durations": 223.615,
            "keystrokes": 336,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\n    totalFouls = [[], 0]\n    if team[1] < 0:\n        totalFouls[0].append(\"{} has an incorrect foul count\".format(team[0]))\n        totalFouls[1] += team[1]\n        foulCount[1:]\n    elif team[1] > 25:\n        totalFouls[0].append(\"{} has too many fouls!\".format(team[0]))\n        totalFouls[1] += team[1]\n        foulCount[1:]\n    else:\n        totalFouls[1] += team[1]\n        foulCount[1:]\n    return totalFouls\n        ",
            "durations": 315.058,
            "keystrokes": 616,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\n    totalFouls = [[], 0]\n    if team[1] < 0:\n        totalFouls[0].append(\"{} has an incorrect foul count\".format(team[0]))\n        totalFouls[1] += team[1]\n        foulCount[1:]\n    elif team[1] > 25:\n        totalFouls[0].append(\"{} has too many fouls!\".format(team[0]))\n        totalFouls[1] += team[1]\n        foulCount[1:]\n    else:\n        totalFouls[1] += team[1]\n        foulCount[1:]\n    return totalFouls\n        ",
            "durations": 315.058,
            "keystrokes": 616,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\n    totalFouls = [[], 0]\n    if teamList[0][1] < 0:\n        totalFouls[0].append(\"{} has an incorrect foul count\".format(teamList[0][0]))\n        totalFouls[1] += teamList[0][1]\n        foulCount[1:]\n    elif teamList[0][1] > 25:\n        totalFouls[0].append(\"{} has too many fouls!\".format(teamList[0][0]))\n        totalFouls[1] += teamList[0][1]\n        foulCount[1:]\n    else:\n        totalFouls[1] += teamList[0][1]\n        foulCount[1:]\n    return totalFouls\n        ",
            "durations": 383.394,
            "keystrokes": 695,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\n    totalFouls = [[], 0]\n    if teamList[0][1] < 0:\n        totalFouls[0].append(\"{} has an incorrect foul count\".format(teamList[0][0]))\n        totalFouls[1] += teamList[0][1]\n        foulCount[1:]\n    elif teamList[0][1] > 25:\n        totalFouls[0].append(\"{} has too many fouls!\".format(teamList[0][0]))\n        totalFouls[1] += teamList[0][1]\n        foulCount[1:]\n    else:\n        totalFouls[1] += teamList[0][1]\n        foulCount[1:]\n    return totalFouls\n        ",
            "durations": 383.394,
            "keystrokes": 695,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\n    totalFouls = [[], 0]\n    if teamList[0][1] < 0:\n        totalFouls[0].append(\"{} has an incorrect foul count\".format(teamList[0][0]))\n        return totalFouls[1] += teamList[0][1] + foulCount[1:]\n    elif teamList[0][1] > 25:\n        totalFouls[0].append(\"{} has too many fouls!\".format(teamList[0][0]))\n        return totalFouls[1] += teamList[0][1] + foulCount[1:]\n    else:\n        return totalFouls[1] += teamList[0][1] + foulCount[1:]\n        ",
            "durations": 439.817,
            "keystrokes": 850,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\n    totalFouls = [[], 0]\n    if teamList[0][1] < 0:\n        totalFouls[0].append(\"{} has an incorrect foul count\".format(teamList[0][0]))\n        return totalFouls[1] += teamList[0][1] + foulCount[1:]\n    elif teamList[0][1] > 25:\n        totalFouls[0].append(\"{} has too many fouls!\".format(teamList[0][0]))\n        return totalFouls[1] += teamList[0][1] + foulCount[1:]\n    else:\n        return totalFouls[1] += teamList[0][1] + foulCount[1:]\n        ",
            "durations": 439.817,
            "keystrokes": 850,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def toCook(classNum, diningDollars):\n    if classNum > 3 and diningDollars > 10:\n        return \"Let's get Panda Express!\"\n    elif classNum < 3 and diningDollars >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 114.481,
            "keystrokes": 335,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 12
        },
        "action": 13,
        "next_state": {
            "submission_history": "def cookingClass(date, onWeekend):\n    if date % 2 == 1 and onWeekend:\n        return f\"Let's check if there is a cooking class on day {date}!\"\n    elif (date % 2 == 0 and onWeekend) or (date % 2 == 1 and not onWeekend):\n        return f\"Let's go cooking on day {date}!\"\n    elif (date % 2 == 0 and not onWeekend):\n        return \"Let's plan for some other day.\"",
            "durations": 167.062,
            "keystrokes": 456,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 13
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def cookingClass(date, onWeekend):\n    if date % 2 == 1 and onWeekend:\n        return f\"Let's check if there is a cooking class on day {date}!\"\n    elif (date % 2 == 0 and onWeekend) or (date % 2 == 1 and not onWeekend):\n        return f\"Let's go cooking on day {date}!\"\n    elif (date % 2 == 0 and not onWeekend):\n        return \"Let's plan for some other day.\"",
            "durations": 167.062,
            "keystrokes": 456,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 13
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = \"\"\n    for i in range(len(jumbledMessage)):\n        if i % 2 == 0:\n            if jumbledMessage[i].isalpha():\n                unscrambledMessage += jumbledMessage[i]\n    return unscrambledMessage",
            "durations": 97.176,
            "keystrokes": 311,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = \"\"\n    for i in range(len(jumbledMessage)):\n        if i % 2 == 0:\n            if jumbledMessage[i].isalpha():\n                unscrambledMessage += jumbledMessage[i]\n    return unscrambledMessage",
            "durations": 97.176,
            "keystrokes": 311,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(direction):\n    for char in direction[::-1]:\n        if char == \"R\":\n            print(\"Turn right!\")\n        elif char == \"L\":\n            print(\"Turn left!\")\n        elif char == \"W\":\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 141.512,
            "keystrokes": 331,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(direction):\n    for char in direction[::-1]:\n        if char == \"R\":\n            print(\"Turn right!\")\n        elif char == \"L\":\n            print(\"Turn left!\")\n        elif char == \"W\":\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 141.512,
            "keystrokes": 331,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(sentence):\n    uppercase = 0\n    lowercase = 0\n    for char in sentence:\n        if char.isalpha():\n            if char.isupper():\n                uppercase += 1\n            elif char.islower():\n                lowercase += 1\n    difference = abs(uppercase - lowercase)\n    if uppercase > lowercase:\n        return f\"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowercase > uppercase:\n        return f\"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 4.45943,
            "keystrokes": 614,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(sentence):\n    uppercase = 0\n    lowercase = 0\n    for char in sentence:\n        if char.isalpha():\n            if char.isupper():\n                uppercase += 1\n            elif char.islower():\n                lowercase += 1\n    difference = abs(uppercase - lowercase)\n    if uppercase > lowercase:\n        return f\"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowercase > uppercase:\n        return f\"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 4.45943,
            "keystrokes": 614,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    string = \"\"\n    for i in range(len(encryptedMessage)):\n        if i % key == 0:\n            string += encryptedMessage[i]\n    return string[::-1]\n",
            "durations": 2.62678,
            "keystrokes": 195,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    string = \"\"\n    for i in range(len(encryptedMessage)):\n        if i % key == 0:\n            string += encryptedMessage[i]\n    return string[::-1]\n",
            "durations": 2.62678,
            "keystrokes": 195,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for candidate in candidates:\n        if candidate[1] == favCity:\n            if candidate[2] in favColors:\n                matches += [candidate[0]]\n    return sorted(matches)",
            "durations": 4.06308,
            "keystrokes": 242,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for candidate in candidates:\n        if candidate[1] == favCity:\n            if candidate[2] in favColors:\n                matches += [candidate[0]]\n    return sorted(matches)",
            "durations": 4.06308,
            "keystrokes": 242,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 19
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    sharedRestaurants = []\n    for rest in yourList:\n        if rest in friendList:\n            sharedRestaurants.append(rest)\n    if sharedRestaurants:\n        return sorted(sharedRestaurants)\n    else:\n        return \"Whatever, we'll go to Nave.\"",
            "durations": 1.22599,
            "keystrokes": 285,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    sharedRestaurants = []\n    for rest in yourList:\n        if rest in friendList:\n            sharedRestaurants.append(rest)\n    if sharedRestaurants:\n        return sorted(sharedRestaurants)\n    else:\n        return \"Whatever, we'll go to Nave.\"",
            "durations": 1.22599,
            "keystrokes": 285,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inventions):\n    completed = 0\n    for invention in inventions:\n        if invention[1] == True:\n            completed += 1\n    if completed:\n        return completed\n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 3.14709,
            "keystrokes": 255,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions):\n    completed = 0\n    for invention in inventions:\n        if invention[1] == True:\n            completed += 1\n    if completed:\n        return completed\n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 3.14709,
            "keystrokes": 255,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 10,
            "current_problem": 20
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    newDict = {}\n    for name, placeList in friendsPreferences.items():\n        for place in placeList:\n            if place in newDict:\n                newDict[place].append(name)\n                newDict[place].sort()\n            else:\n                newDict[place] = [name]\n    return newDict\n",
            "durations": 5.13521,
            "keystrokes": 332,
            "attempts": 1,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    newDict = {}\n    for name, placeList in friendsPreferences.items():\n        for place in placeList:\n            if place in newDict:\n                newDict[place].append(name)\n                newDict[place].sort()\n            else:\n                newDict[place] = [name]\n    return newDict\n",
            "durations": 5.13521,
            "keystrokes": 332,
            "attempts": 1,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    newDict = {}\n    for name, placeList in friendsPreferences.items():\n        for place in placeList:\n            if place in newDict:\n                newDict[str(place)].append(name)\n                newDict[place].sort()\n            else:\n                newDict[str(place)] = [name]\n    return newDict\n",
            "durations": 196.444,
            "keystrokes": 342,
            "attempts": 2,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    newDict = {}\n    for name, placeList in friendsPreferences.items():\n        for place in placeList:\n            if place in newDict:\n                newDict[str(place)].append(name)\n                newDict[place].sort()\n            else:\n                newDict[str(place)] = [name]\n    return newDict\n",
            "durations": 196.444,
            "keystrokes": 342,
            "attempts": 2,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    newDict = {}\n    for name, placeList in friendsPreferences.items():\n        for place in placeList:\n            if str(place) in newDict:\n                newDict[str(place)].append(name)\n                newDict[place].sort()\n            else:\n                newDict[str(place)] = [name]\n    return newDict\n",
            "durations": 221.841,
            "keystrokes": 351,
            "attempts": 3,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    newDict = {}\n    for name, placeList in friendsPreferences.items():\n        for place in placeList:\n            if str(place) in newDict:\n                newDict[str(place)].append(name)\n                newDict[place].sort()\n            else:\n                newDict[str(place)] = [name]\n    return newDict\n",
            "durations": 221.841,
            "keystrokes": 351,
            "attempts": 3,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 4
        },
        "action": 5,
        "next_state": {
            "submission_history": "def creditHours(courseCatalog, myCourses):\n    creditHour = 0\n    for course, num in myCourses.items():\n        for c in num:\n            creditHour += courseCatalog[course][c]\n    return creditHour",
            "durations": 1.46403,
            "keystrokes": 198,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 5
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def creditHours(courseCatalog, myCourses):\n    creditHour = 0\n    for course, num in myCourses.items():\n        for c in num:\n            creditHour += courseCatalog[course][c]\n    return creditHour",
            "durations": 1.46403,
            "keystrokes": 198,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 5
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    newDict = {}\n    for driver, salary in drivers:\n        for i in range(len(teams)):\n            if salary <= teamBudget[i]:\n                if teams[i] in newDict:\n                    newDict[teams[i]].append(driver)\n                    newDict[teams[i]].sort()\n                else:\n                    newDict[teams[i]] = [driver]\n    return newDict",
            "durations": 1.27212,
            "keystrokes": 400,
            "attempts": 1,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    newDict = {}\n    for driver, salary in drivers:\n        for i in range(len(teams)):\n            if salary <= teamBudget[i]:\n                if teams[i] in newDict:\n                    newDict[teams[i]].append(driver)\n                    newDict[teams[i]].sort()\n                else:\n                    newDict[teams[i]] = [driver]\n    return newDict",
            "durations": 1.27212,
            "keystrokes": 400,
            "attempts": 1,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    newDict = {}\n    for team in teams:\n        newDict[team] = []\n    for driver, salary in drivers:\n        for i in range(len(teams)):\n            if salary <= teamBudget[i]:\n                newDict[teams[i]].append(driver)\n                newDict[teams[i]].sort()\n    return newDict",
            "durations": 255.074,
            "keystrokes": 469,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    newDict = {}\n    for team in teams:\n        newDict[team] = []\n    for driver, salary in drivers:\n        for i in range(len(teams)):\n            if salary <= teamBudget[i]:\n                newDict[teams[i]].append(driver)\n                newDict[teams[i]].sort()\n    return newDict",
            "durations": 255.074,
            "keystrokes": 469,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 21
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfshops):\n    if listofshops == []:\n        return {}\n    shopsToVisit = atlCoffee(listOfshops[1:])\n    place = listOfshops[0][0]\n    loc = listOfshops[0][1]\n    rating = listOfshops[0][2]\n    if rating > 5:\n        if loc in shopsToVisit:\n            shopsToVisit[loc].append(place)\n            shopsToVisit[loc].sort()\n        else:\n            shopsToVisit[loc] = [place]\n    return shopsToVisit",
            "durations": 3.17174,
            "keystrokes": 416,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfshops):\n    if listofshops == []:\n        return {}\n    shopsToVisit = atlCoffee(listOfshops[1:])\n    place = listOfshops[0][0]\n    loc = listOfshops[0][1]\n    rating = listOfshops[0][2]\n    if rating > 5:\n        if loc in shopsToVisit:\n            shopsToVisit[loc].append(place)\n            shopsToVisit[loc].sort()\n        else:\n            shopsToVisit[loc] = [place]\n    return shopsToVisit",
            "durations": 3.17174,
            "keystrokes": 416,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfshops):\n    if listOfshops == []:\n        return {}\n    shopsToVisit = atlCoffee(listOfshops[1:])\n    place = listOfshops[0][0]\n    loc = listOfshops[0][1]\n    rating = listOfshops[0][2]\n    if rating > 5:\n        if loc in shopsToVisit:\n            shopsToVisit[loc].append(place)\n            shopsToVisit[loc].sort()\n        else:\n            shopsToVisit[loc] = [place]\n    return shopsToVisit",
            "durations": 83.2223,
            "keystrokes": 416,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfshops):\n    if listOfshops == []:\n        return {}\n    shopsToVisit = atlCoffee(listOfshops[1:])\n    place = listOfshops[0][0]\n    loc = listOfshops[0][1]\n    rating = listOfshops[0][2]\n    if rating > 5:\n        if loc in shopsToVisit:\n            shopsToVisit[loc].append(place)\n            shopsToVisit[loc].sort()\n        else:\n            shopsToVisit[loc] = [place]\n    return shopsToVisit",
            "durations": 83.2223,
            "keystrokes": 416,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 11
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\n    total = 0\n    if teamList == []:\n        return []\n    totalFouls = foulCount(teamList[1:])\n    team = teamList[0][0]\n    fouls = teamList[0][1]\n    total += fouls\n    totalFouls = [total]\n    if fouls > 25:\n        return f\"{team} has too many fouls!\"\n    if fouls < 0:\n        return f\"{team} has an incorrect foul count\"\n    return totalFouls",
            "durations": 0.945583,
            "keystrokes": 374,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\n    total = 0\n    if teamList == []:\n        return []\n    totalFouls = foulCount(teamList[1:])\n    team = teamList[0][0]\n    fouls = teamList[0][1]\n    total += fouls\n    totalFouls = [total]\n    if fouls > 25:\n        return f\"{team} has too many fouls!\"\n    if fouls < 0:\n        return f\"{team} has an incorrect foul count\"\n    return totalFouls",
            "durations": 0.945583,
            "keystrokes": 374,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\n    total = 0\n    if teamList == []:\n        return []\n    totalFouls = foulCount(teamList[1:])\n    team = teamList[0][0]\n    fouls = teamList[0][1]\n    total += fouls\n    totalFouls.append(total)\n    if fouls > 25:\n        return f\"{team} has too many fouls!\"\n    if fouls < 0:\n        return f\"{team} has an incorrect foul count\"\n    return totalFouls",
            "durations": 124.852,
            "keystrokes": 406,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\n    total = 0\n    if teamList == []:\n        return []\n    totalFouls = foulCount(teamList[1:])\n    team = teamList[0][0]\n    fouls = teamList[0][1]\n    total += fouls\n    totalFouls.append(total)\n    if fouls > 25:\n        return f\"{team} has too many fouls!\"\n    if fouls < 0:\n        return f\"{team} has an incorrect foul count\"\n    return totalFouls",
            "durations": 124.852,
            "keystrokes": 406,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n    else:\n        print(f\"Coffees left: {num}\")\n        numCoffees(num-1)",
            "durations": 1.49148,
            "keystrokes": 144,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n    else:\n        print(f\"Coffees left: {num}\")\n        numCoffees(num-1)",
            "durations": 1.49148,
            "keystrokes": 144,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "action": -1,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def toCook(classes, dollars):\n    if classes > 3 and dollars > 10.0:\n        return \"Let's get Panda Express!\"\n    elif classes <= 3 and dollars >= 50.0:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"\nprint(toCook(4, 15.0))\nprint(toCook(2, 5.0))\nprint(toCook(3, 50.0))",
            "durations": 295.226,
            "keystrokes": 367,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 2,
            "current_problem": 12
        },
        "action": 13,
        "next_state": {
            "submission_history": "def cookingClass(date, weekend):\n    if date % 2 == 0:\n        if weekend == True:\n            return f\"Let's go cooking on day {date}!\"\n        else:\n            return \"Let's plan for some other day.\"\n    else:\n        if weekend == True:\n            return f\"Let's check if there is a cooking class on day {date}!\"\n        else:\n            return f\"Let's go cooking on day {date}!\"\n        \nprint(cookingClass(14, True))\nprint(cookingClass(5, True))",
            "durations": 328.198,
            "keystrokes": 553,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 2,
            "current_problem": 13
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def cookingClass(date, weekend):\n    if date % 2 == 0:\n        if weekend == True:\n            return f\"Let's go cooking on day {date}!\"\n        else:\n            return \"Let's plan for some other day.\"\n    else:\n        if weekend == True:\n            return f\"Let's check if there is a cooking class on day {date}!\"\n        else:\n            return f\"Let's go cooking on day {date}!\"\n        \nprint(cookingClass(14, True))\nprint(cookingClass(5, True))",
            "durations": 328.198,
            "keystrokes": 553,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 2,
            "current_problem": 13
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureThe Flag(directions):\n    backwards = directions[::-1]\n    for letter in backwards:\n        if letter == \"L\":\n            print(\"Turn left!\")\n        elif letter == \"R\":\n            print(\"Turn right!\")\n        elif letter == \"W\":\n            return \"Poseidon is my dad?!\"\n        else:\n            return \"We made it back!\"\nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 302.058,
            "keystrokes": 474,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureThe Flag(directions):\n    backwards = directions[::-1]\n    for letter in backwards:\n        if letter == \"L\":\n            print(\"Turn left!\")\n        elif letter == \"R\":\n            print(\"Turn right!\")\n        elif letter == \"W\":\n            return \"Poseidon is my dad?!\"\n        else:\n            return \"We made it back!\"\nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 302.058,
            "keystrokes": 474,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    for letter in backwards:\n        if letter == \"L\":\n            print(\"Turn left!\")\n        elif letter == \"R\":\n            print(\"Turn right!\")\n        elif letter == \"W\":\n            return \"Poseidon is my dad?!\"\n        else:\n            return \"We made it back!\"\nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 319.604,
            "keystrokes": 475,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    for letter in backwards:\n        if letter == \"L\":\n            print(\"Turn left!\")\n        elif letter == \"R\":\n            print(\"Turn right!\")\n        elif letter == \"W\":\n            return \"Poseidon is my dad?!\"\n        else:\n            return \"We made it back!\"\nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 319.604,
            "keystrokes": 475,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    directionList = []\n    for letter in backwards:\n        if letter == \"L\":\n            directionList.append(\"Turn left!\")\n        elif letter == \"R\":\n            directionList.append(\"Turn right!\")\n        elif letter == \"W\":\n            return \"Poseidon is my dad?!\"\n        else:\n            return \"We made it back!\"\n    return directionList\nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 435.119,
            "keystrokes": 591,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    directionList = []\n    for letter in backwards:\n        if letter == \"L\":\n            directionList.append(\"Turn left!\")\n        elif letter == \"R\":\n            directionList.append(\"Turn right!\")\n        elif letter == \"W\":\n            return \"Poseidon is my dad?!\"\n        else:\n            return \"We made it back!\"\n    return directionList\nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 435.119,
            "keystrokes": 591,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    directionList = []\n    for letter in backwards:\n        if letter == \"L\":\n            directionList.append(\"Turn left!\")\n        elif letter == \"R\":\n            directionList.append(\"Turn right!\")\n        elif letter == \"W\":\n            directionList.append(\"Poseidon is my dad?!\")\n            return directionList\n    return \"Made it back!\"\n            \nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 943.866,
            "keystrokes": 1542,
            "attempts": 4,
            "test_case_accuracy": 0.6,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    directionList = []\n    for letter in backwards:\n        if letter == \"L\":\n            directionList.append(\"Turn left!\")\n        elif letter == \"R\":\n            directionList.append(\"Turn right!\")\n        elif letter == \"W\":\n            directionList.append(\"Poseidon is my dad?!\")\n            return directionList\n    return \"Made it back!\"\n            \nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 943.866,
            "keystrokes": 1542,
            "attempts": 4,
            "test_case_accuracy": 0.6,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    directionList = []\n    for letter in backwards:\n        if letter == \"L\":\n            directionList.append(\"Turn left!\")\n        elif letter == \"R\":\n            directionList.append(\"Turn right!\")\n        elif letter == \"W\":\n            directionList.append(\"Poseidon is my dad?!\")\n            return directionList\n    return directionList.append(\"Made it back!\")\n            \nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 1028.86,
            "keystrokes": 1598,
            "attempts": 5,
            "test_case_accuracy": 0.6,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    backwards = directions[::-1]\n    directionList = []\n    for letter in backwards:\n        if letter == \"L\":\n            directionList.append(\"Turn left!\")\n        elif letter == \"R\":\n            directionList.append(\"Turn right!\")\n        elif letter == \"W\":\n            directionList.append(\"Poseidon is my dad?!\")\n            return directionList\n    return directionList.append(\"Made it back!\")\n            \nprint(captureTheFlag('LLRL'))\nprint(captureTheFlag('LLLLLLRWR'))",
            "durations": 1028.86,
            "keystrokes": 1598,
            "attempts": 5,
            "test_case_accuracy": 0.6,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index, letter in jumbledMessage:\n        if letter.isalpha():\n            if index % 2 == 0:\n                unscrambledMessage += letter\n    return unscrambledMessage\n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 206.068,
            "keystrokes": 404,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index, letter in jumbledMessage:\n        if letter.isalpha():\n            if index % 2 == 0:\n                unscrambledMessage += letter\n    return unscrambledMessage\n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 206.068,
            "keystrokes": 404,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index, letter in jumbledMessage.enumerate():\n        if letter.isalpha():\n            if index % 2 == 0:\n                unscrambledMessage += letter\n    return unscrambledMessage\n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 226.367,
            "keystrokes": 416,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index, letter in jumbledMessage.enumerate():\n        if letter.isalpha():\n            if index % 2 == 0:\n                unscrambledMessage += letter\n    return unscrambledMessage\n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 226.367,
            "keystrokes": 416,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index in len(range(jumbledMessage)):\n        if index % 2 == 0:\n            if jumbledMessage[index].isalpha():\n                unscrambledMessage += jumbledMessage[index]\n    return unscrambledMessage\n    \n    \n    \n    \n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 359.023,
            "keystrokes": 878,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index in len(range(jumbledMessage)):\n        if index % 2 == 0:\n            if jumbledMessage[index].isalpha():\n                unscrambledMessage += jumbledMessage[index]\n    return unscrambledMessage\n    \n    \n    \n    \n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 359.023,
            "keystrokes": 878,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index in range(len(jumbledMessage)):\n        if index % 2 == 0:\n            if jumbledMessage[index].isalpha():\n                unscrambledMessage += jumbledMessage[index]\n    return unscrambledMessage\n    \n    \n    \n    \n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 388.345,
            "keystrokes": 882,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(jumbledMessage):\n    unscrambledMessage = ''\n    for index in range(len(jumbledMessage)):\n        if index % 2 == 0:\n            if jumbledMessage[index].isalpha():\n                unscrambledMessage += jumbledMessage[index]\n    return unscrambledMessage\n    \n    \n    \n    \n    \nprint(demystifyMessage(\"P1E3R5C7Y9\"))\nprint(demystifyMessage(\"*DD%PE^M7;I&GGOKD\"))\n            ",
            "durations": 388.345,
            "keystrokes": 882,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 14
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            encryptedMessage[index] += decryptedMessage\n    decryptedMessage = decryptedMessage[::-1\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 222.485,
            "keystrokes": 421,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            encryptedMessage[index] += decryptedMessage\n    decryptedMessage = decryptedMessage[::-1\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 222.485,
            "keystrokes": 421,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            encryptedMessage[index] += decryptedMessage\n    decryptedMessage = decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 230.201,
            "keystrokes": 422,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            encryptedMessage[index] += decryptedMessage\n    decryptedMessage = decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 230.201,
            "keystrokes": 422,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            encryptedMessage[index] += decryptedMessage\n    decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 256.293,
            "keystrokes": 441,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            encryptedMessage[index] += decryptedMessage\n    decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 256.293,
            "keystrokes": 441,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            decryptedMessage += encryptedMessage[index]\n    decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 302.425,
            "keystrokes": 497,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            decryptedMessage += encryptedMessage[index]\n    decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 302.425,
            "keystrokes": 497,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            decryptedMessage += encryptedMessage[index]\n    decryptedMessage = decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 321.369,
            "keystrokes": 516,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(encryptedMessage, key):\n    decryptedMessage = ''\n    for index in range(len(encryptedMessage)):\n        if index % key == 0:\n            decryptedMessage += encryptedMessage[index]\n    decryptedMessage = decryptedMessage[::-1]\n    return decryptedMessage\n    \nprint(decryptValentine(\"u1o3y4 3e5v0o2L\", 2))\nprint(decryptValentine(\"!o2t67r12a!!ejkH\", 3))",
            "durations": 321.369,
            "keystrokes": 516,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(loveLetter):\n    upper = 0\n    lower = 0\n    for letter in loveLetter:\n        if letter.isupper():\n            upper += 1\n        elif letter.islower():\n            lower += 1\n        else:\n            continue\n    difference = abs(upper - lower)\n    if upper > lower:\n        return f\"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    if lower > upper:\n        return f\"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"\n\nprint(countCase(\"You are my MOON!\"))\nprint(countCase(\"U + m3 = <3\"))",
            "durations": 316.072,
            "keystrokes": 734,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(loveLetter):\n    upper = 0\n    lower = 0\n    for letter in loveLetter:\n        if letter.isupper():\n            upper += 1\n        elif letter.islower():\n            lower += 1\n        else:\n            continue\n    difference = abs(upper - lower)\n    if upper > lower:\n        return f\"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    if lower > upper:\n        return f\"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"\n\nprint(countCase(\"You are my MOON!\"))\nprint(countCase(\"U + m3 = <3\"))",
            "durations": 316.072,
            "keystrokes": 734,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n        \nprint(eatingOut(yourList, friendList))\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 287.218,
            "keystrokes": 608,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n        \nprint(eatingOut(yourList, friendList))\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 287.218,
            "keystrokes": 608,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'], friendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys'], friendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 330.928,
            "keystrokes": 874,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'], friendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys'], friendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 330.928,
            "keystrokes": 874,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 380.861,
            "keystrokes": 883,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 380.861,
            "keystrokes": 883,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 430.923,
            "keystrokes": 883,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites. append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 430.923,
            "keystrokes": 883,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites.append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 443.649,
            "keystrokes": 884,
            "attempts": 5,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for placefriend in friendList:\n            if placefriend == place:\n                if placefriend not in favorites:\n                    favorites.append[placefriend]\n    if favorites == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sorted(favorites)\n \n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                ",
            "durations": 443.649,
            "keystrokes": 884,
            "attempts": 5,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append([place2])\n    return favorites\n                \n\n",
            "durations": 1114.12,
            "keystrokes": 1389,
            "attempts": 6,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append([place2])\n    return favorites\n                \n\n",
            "durations": 1114.12,
            "keystrokes": 1389,
            "attempts": 6,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append([place2])\n    return favorites\n                \n\n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                \n\n",
            "durations": 1137.15,
            "keystrokes": 1755,
            "attempts": 7,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append([place2])\n    return favorites\n                \n\n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                \n\n",
            "durations": 1137.15,
            "keystrokes": 1755,
            "attempts": 7,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append(place2)\n    return favorites\n                \n\n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                \n\n",
            "durations": 1157.35,
            "keystrokes": 1757,
            "attempts": 8,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append(place2)\n    return favorites\n                \n\n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                \n\n",
            "durations": 1157.35,
            "keystrokes": 1757,
            "attempts": 8,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append(place2)\n    return sorted(favorites)\n                \n\n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                \n\n",
            "durations": 1184.4,
            "keystrokes": 1775,
            "attempts": 9,
            "test_case_accuracy": 0.6,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    favorites = []\n    for place in yourList:\n        for place2 in friendList:\n            if place2 == place:\n                favorites.append(place2)\n    return sorted(favorites)\n                \n\n \nyourList = ['Gyro Bros', 'Subway', 'Ponko Chicken', 'Tin Drum'] \nfriendList = ['McDonalds', \"Umma's\", 'Subway', 'Gyro Bros']       \nprint(eatingOut(yourList, friendList))\n\nyourList = ['Blue Donkey', \"Kaldi's\", 'Panda Express', 'Halal Guys']\nfriendList = ['5th Street Deli', 'Brain Freeze', 'Panda Express']\nprint(eatingOut(yourList, friendList))\n                \n\n",
            "durations": 1184.4,
            "keystrokes": 1775,
            "attempts": 9,
            "test_case_accuracy": 0.6,
            "difficulty": 3,
            "topic": 6,
            "current_problem": 1
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for candidate in candidate:\n        if candidate[1] == favCity:\n            if candidate[2] in favColors:\n                matches.append(candidate[0])\n    return sorted(matches)\n    \ncandidates = [[\"Joey\", \"NYC\", \"blue\"], [\"Chandler\", \"NYC\", \"green\"]]\n\nfavCity = \"NYC\"\n\nfavColors = [\"green\", \"pink\", \"blue\"]\n\nprint(findLove(candidates, favCity, favColors))\n\ncandidates = [[\"Eric\", \"Denver\", \"red\"], [\"Kyle\", \"Denver\", \"yellow\"], [\"Stan\", \"Atlanta\", \"blue\"]]\n\nfavCity = \"Atlanta\"\n\nfavColors = [\"yellow\", \"orange\", \"red\"]\n\nprint(findLove(candidates, favCity, favColors))\n\n\n                ",
            "durations": 276.113,
            "keystrokes": 752,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for candidate in candidate:\n        if candidate[1] == favCity:\n            if candidate[2] in favColors:\n                matches.append(candidate[0])\n    return sorted(matches)\n    \ncandidates = [[\"Joey\", \"NYC\", \"blue\"], [\"Chandler\", \"NYC\", \"green\"]]\n\nfavCity = \"NYC\"\n\nfavColors = [\"green\", \"pink\", \"blue\"]\n\nprint(findLove(candidates, favCity, favColors))\n\ncandidates = [[\"Eric\", \"Denver\", \"red\"], [\"Kyle\", \"Denver\", \"yellow\"], [\"Stan\", \"Atlanta\", \"blue\"]]\n\nfavCity = \"Atlanta\"\n\nfavColors = [\"yellow\", \"orange\", \"red\"]\n\nprint(findLove(candidates, favCity, favColors))\n\n\n                ",
            "durations": 276.113,
            "keystrokes": 752,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 6,
            "current_problem": 19
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for candidate in candidates:\n        if candidate[1] == favCity:\n            if candidate[2] in favColors:\n                matches.append(candidate[0])\n    return sorted(matches)\n    \ncandidates = [[\"Joey\", \"NYC\", \"blue\"], [\"Chandler\", \"NYC\", \"green\"]]\n\nfavCity = \"NYC\"\n\nfavColors = [\"green\", \"pink\", \"blue\"]\n\nprint(findLove(candidates, favCity, favColors))\n\ncandidates = [[\"Eric\", \"Denver\", \"red\"], [\"Kyle\", \"Denver\", \"yellow\"], [\"Stan\", \"Atlanta\", \"blue\"]]\n\nfavCity = \"Atlanta\"\n\nfavColors = [\"yellow\", \"orange\", \"red\"]\n\nprint(findLove(candidates, favCity, favColors))\n\n\n                ",
            "durations": 296.302,
            "keystrokes": 753,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for candidate in candidates:\n        if candidate[1] == favCity:\n            if candidate[2] in favColors:\n                matches.append(candidate[0])\n    return sorted(matches)\n    \ncandidates = [[\"Joey\", \"NYC\", \"blue\"], [\"Chandler\", \"NYC\", \"green\"]]\n\nfavCity = \"NYC\"\n\nfavColors = [\"green\", \"pink\", \"blue\"]\n\nprint(findLove(candidates, favCity, favColors))\n\ncandidates = [[\"Eric\", \"Denver\", \"red\"], [\"Kyle\", \"Denver\", \"yellow\"], [\"Stan\", \"Atlanta\", \"blue\"]]\n\nfavCity = \"Atlanta\"\n\nfavColors = [\"yellow\", \"orange\", \"red\"]\n\nprint(findLove(candidates, favCity, favColors))\n\n\n                ",
            "durations": 296.302,
            "keystrokes": 753,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 6,
            "current_problem": 19
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList.items():\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 487.442,
            "keystrokes": 937,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList.items():\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 487.442,
            "keystrokes": 937,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList.items():\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 487.442,
            "keystrokes": 937,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList.items():\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 487.442,
            "keystrokes": 937,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 502.028,
            "keystrokes": 945,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 502.028,
            "keystrokes": 945,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 502.028,
            "keystrokes": 945,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name, times.remove(slowestTime))\n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 502.028,
            "keystrokes": 945,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name)\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 550.397,
            "keystrokes": 1029,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name)\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 550.397,
            "keystrokes": 1029,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name)\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 550.397,
            "keystrokes": 1029,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append(name)\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 550.397,
            "keystrokes": 1029,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append((name, times.remove(slowestTime)))\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 608.338,
            "keystrokes": 1064,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append((name, times.remove(slowestTime)))\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 608.338,
            "keystrokes": 1064,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 10,
            "current_problem": 2
        },
        "action": 2,
        "next_state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append((name, times.remove(slowestTime)))\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 608.338,
            "keystrokes": 1064,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def organizeTimes(unorganizedTimeList):\n    organizedTimeList = []\n    for times, name in unorganizedTimeList:\n        slowestTime = 0\n        for time in times:\n            if time > slowestTime:\n                slowestTime = time\n        organizedTimeList.append((name, times.remove(slowestTime)))\n        \n    \n    return sorted(organizedTimeList)\n    \nunorganizedTimeList = [([7.05, 8.0, 6.2], \"Andre\"), ([6.14, 9.2, 7.2], \"Collin\"), ([7.42, 30.2, 6.34], \"Ethan\"), ([9.2, 8.1, 6.23], \"Evan\")]\n\nprint(organizeTimes(unorganizedTimeList))\n\nunorganizedTimeList = [([27.52, 28.54, 16.22], \"Naomi\"),([36.49, 48.32, 21.47], \"Chris\")]\n\nprint(organizeTimes(unorganizedTimeList))\n    ",
            "durations": 608.338,
            "keystrokes": 1064,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 7,
            "current_problem": 2
        },
        "action": 2,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    else:\n        newList = foulCount(tList[1:])\n        if tList[0][1] > 25:\n            newList[0].append(f\"{tList[0][0]} has too many fouls!\")\n        if tList[0][1] < 0:\n            newList[0].append(f\"{tList[0][0]} has an incorrect foul count.\")\n        newList[1] += tList[0][1]\n        return newList\n        \n",
            "durations": 554.575,
            "keystrokes": 705,
            "attempts": 1,
            "test_case_accuracy": 0.4,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": -1,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def toCook(numClasses, diningDollars):\n    if numClasses > 3 and diningDollars > 10:\n        return \"Let's get Panda Express!\"\n    elif numClasses <= 3 and diningDollars >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 265.045,
            "keystrokes": 402,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 2,
            "current_problem": 12
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(mess):\n    finalMess = \"\"\n    for index, char in enumerate(mess):\n        if index % 2 == 1:\n            continue\n        if char.ischar():\n            finalMess += char\n    return finalMess\n            ",
            "durations": 341.523,
            "keystrokes": 292,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(mess):\n    finalMess = \"\"\n    for index, char in enumerate(mess):\n        if index % 2 == 1:\n            continue\n        if char.ischar():\n            finalMess += char\n    return finalMess\n            ",
            "durations": 341.523,
            "keystrokes": 292,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 14
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(mess):\n    finalMess = \"\"\n    for index, char in enumerate(mess):\n        if index % 2 == 1:\n            continue\n        if char.isalpha():\n            finalMess += char\n    return finalMess\n            ",
            "durations": 610.7,
            "keystrokes": 303,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(mess):\n    finalMess = \"\"\n    for index, char in enumerate(mess):\n        if index % 2 == 1:\n            continue\n        if char.isalpha():\n            finalMess += char\n    return finalMess\n            ",
            "durations": 610.7,
            "keystrokes": 303,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 14
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    for t in directions[::-1]:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"",
            "durations": 267.332,
            "keystrokes": 351,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    for t in directions[::-1]:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"",
            "durations": 267.332,
            "keystrokes": 351,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    for t in directions[::-1]:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"",
            "durations": 281.429,
            "keystrokes": 351,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    for t in directions[::-1]:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"",
            "durations": 281.429,
            "keystrokes": 351,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    for t in directions[::-1]:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 294.707,
            "keystrokes": 398,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    for t in directions[::-1]:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 294.707,
            "keystrokes": 398,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    for t in directions:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 345.419,
            "keystrokes": 478,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    directions = directions[::-1]\n    for t in directions:\n        if t == \"L\":\n            print(\"Turn left!\")\n        elif t == \"R\":\n            print(\"Turn right!\")\n        else:\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 345.419,
            "keystrokes": 478,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1\n            if aStr[t+5] == 1:\n                return aStr[t:t+6]\n",
            "durations": 583.384,
            "keystrokes": 238,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1\n            if aStr[t+5] == 1:\n                return aStr[t:t+6]\n",
            "durations": 583.384,
            "keystrokes": 238,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1:\n            if aStr[t+5] == 1:\n                return aStr[t:t+6]\n",
            "durations": 592.567,
            "keystrokes": 239,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1:\n            if aStr[t+5] == 1:\n                return aStr[t:t+6]\n",
            "durations": 592.567,
            "keystrokes": 239,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1:\n            if aStr[t+5] == 1:\n                return aStr[t:(t+6)]\n",
            "durations": 626.744,
            "keystrokes": 241,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1:\n            if aStr[t+5] == 1:\n                return aStr[t:(t+6)]\n",
            "durations": 626.744,
            "keystrokes": 241,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1:\n            if aStr[t+5] == 1:\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 648.379,
            "keystrokes": 314,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == 1:\n            if aStr[t+5] == 1:\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 648.379,
            "keystrokes": 314,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == \"1\":\n            if aStr[t+5] == \"1\":\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 808.779,
            "keystrokes": 318,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == \"1\":\n            if aStr[t+5] == \"1\":\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 808.779,
            "keystrokes": 318,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 5):\n        if aStr[t] == \"1\":\n            if aStr[t+5] == \"1\":\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 841.802,
            "keystrokes": 318,
            "attempts": 6,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 5):\n        if aStr[t] == \"1\":\n            if aStr[t+5] == \"1\":\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 841.802,
            "keystrokes": 318,
            "attempts": 6,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == \"1\":\n            if aStr[t+5] == \"1\":\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 1100.2,
            "keystrokes": 318,
            "attempts": 7,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), 6):\n        if aStr[t] == \"1\":\n            if aStr[t+5] == \"1\":\n                return aStr[t:(t+6)]\n    return \"Slow day today!\"\n",
            "durations": 1100.2,
            "keystrokes": 318,
            "attempts": 7,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), length):\n        if aStr[t] == \"1\":\n            if aStr[t+(length-1)] == \"1\":\n                return aStr[t:(t+length)]\n    return \"Slow day today!\"\n",
            "durations": 1159.32,
            "keystrokes": 343,
            "attempts": 8,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(aStr, length):\n    for t in range(0, len(aStr), length):\n        if aStr[t] == \"1\":\n            if aStr[t+(length-1)] == \"1\":\n                return aStr[t:(t+length)]\n    return \"Slow day today!\"\n",
            "durations": 1159.32,
            "keystrokes": 343,
            "attempts": 8,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(coffeeList):\n    if coffeeList == []:\n        return {}\n    aDict = atlCoffee(coffeeList[1:])\n    if coffeeList[0][2] > 5:\n        if coffeeList[0][1] in aDict:\n            aDict[coffeeList[0][1]].append(coffeeList[0][0])\n        else:\n            aDict[coffeeList[0][1]] = [coffeeList[0][0]]\n    return aDict",
            "durations": 282.923,
            "keystrokes": 501,
            "attempts": 1,
            "test_case_accuracy": 0.6,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(coffeeList):\n    if coffeeList == []:\n        return {}\n    aDict = atlCoffee(coffeeList[1:])\n    if coffeeList[0][2] > 5:\n        if coffeeList[0][1] in aDict:\n            aDict[coffeeList[0][1]].append(coffeeList[0][0])\n        else:\n            aDict[coffeeList[0][1]] = [coffeeList[0][0]]\n    return aDict",
            "durations": 282.923,
            "keystrokes": 501,
            "attempts": 1,
            "test_case_accuracy": 0.6,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(coffeeList):\n    if coffeeList == []:\n        return {}\n    aDict = atlCoffee(coffeeList[1:])\n    if coffeeList[0][2] > 5:\n        if coffeeList[0][1] in aDict:\n            aDict[coffeeList[0][1]].append(coffeeList[0][0])\n            aDict[coffeeList[0][1]].sort()\n        else:\n            aDict[coffeeList[0][1]] = [coffeeList[0][0]]\n    return aDict",
            "durations": 328.718,
            "keystrokes": 544,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(coffeeList):\n    if coffeeList == []:\n        return {}\n    aDict = atlCoffee(coffeeList[1:])\n    if coffeeList[0][2] > 5:\n        if coffeeList[0][1] in aDict:\n            aDict[coffeeList[0][1]].append(coffeeList[0][0])\n            aDict[coffeeList[0][1]].sort()\n        else:\n            aDict[coffeeList[0][1]] = [coffeeList[0][0]]\n    return aDict",
            "durations": 328.718,
            "keystrokes": 544,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 130.683,
            "keystrokes": 217,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 130.683,
            "keystrokes": 217,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 204.325,
            "keystrokes": 217,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 204.325,
            "keystrokes": 217,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        return None\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 333.702,
            "keystrokes": 247,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        return None\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 333.702,
            "keystrokes": 247,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        \n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 339.262,
            "keystrokes": 258,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        \n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 339.262,
            "keystrokes": 258,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        \n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 342.323,
            "keystrokes": 258,
            "attempts": 5,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        \n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 342.323,
            "keystrokes": 258,
            "attempts": 5,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        return None\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 349.653,
            "keystrokes": 271,
            "attempts": 6,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        print(\"No more coffee!\")\n        return None\n    print(f\"Coffees left: {num}\")\n    return numCoffees(num-1)",
            "durations": 349.653,
            "keystrokes": 271,
            "attempts": 6,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 7,
        "next_state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff = \"uncaffeinated\"\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 458.408,
            "keystrokes": 850,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff = \"uncaffeinated\"\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 458.408,
            "keystrokes": 850,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "action": 7,
        "next_state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\"\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 465.527,
            "keystrokes": 851,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\"\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 465.527,
            "keystrokes": 851,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "action": 7,
        "next_state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\"\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 470.771,
            "keystrokes": 851,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\"\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 470.771,
            "keystrokes": 851,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "action": 7,
        "next_state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\":\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 503.581,
            "keystrokes": 886,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\":\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 503.581,
            "keystrokes": 886,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "action": 7,
        "next_state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"files/summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\":\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 516.91,
            "keystrokes": 894,
            "attempts": 5,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"files/summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\":\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season:(\"\n    return finalList\n                    ",
            "durations": 516.91,
            "keystrokes": 894,
            "attempts": 5,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "action": 7,
        "next_state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"files/summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\":\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season :(\"\n    return finalList\n                    ",
            "durations": 533.225,
            "keystrokes": 895,
            "attempts": 6,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def inSeason(favDrinks, month):\n    infile = open(\"files/summerDrinks.csv\")\n    header = infile.readline()\n    data = infile.readlines()\n    finalList = []\n    for line in data:\n        linepieces = line.strip().split(\",\")\n        drink = linepieces[0]\n        temp = linepieces[1]\n        caff = linepieces[2]\n        monthOS = linepieces[3]\n        if drink in favDrinks:\n            if monthOS == month:\n                if caff == \"uncaffeinated\":\n                    finalList.append(drink)\n    if finalList == []:\n        return \"Nothing is in season :(\"\n    return finalList\n                    ",
            "durations": 533.225,
            "keystrokes": 895,
            "attempts": 6,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 1,
            "current_problem": 7
        },
        "action": 7,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def cookingClass(date, isWeekend):\n    if date % 2 == 1:\n        if isWeekend:\n            return f\"Let's check if there is a cooking class on day {date}!\"\n        else:\n            return f\"Let's go cooking on day {date}!\"\n    else:\n        if isWeekend:\n            return f\"Let's go cooking on day {date}!\"\n        else:\n            return f\"Let's plan for some other day.\"",
            "durations": 174.402,
            "keystrokes": 442,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 13
        },
        "action": 12,
        "next_state": {
            "submission_history": "def toCook(numClasses, diningDollars):\n    if numClasses > 3 and diningDollars > 10:\n        return \"Let's get Panda Express!\"\n    elif numClasses < 3 and diningDollars >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 112.576,
            "keystrokes": 315,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 12
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def toCook(numClasses, diningDollars):\n    if numClasses > 3 and diningDollars > 10:\n        return \"Let's get Panda Express!\"\n    elif numClasses < 3 and diningDollars >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 112.576,
            "keystrokes": 315,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 12
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    for i in directions:\n        if i == 'L':\n            print('Turn left!')\n        elif i == 'R':\n            print('Turn right!')\n        elif i == 'W':\n            return 'Poseidon is my dad?!'\n    return 'Made it back!'",
            "durations": 163.429,
            "keystrokes": 297,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    for i in directions:\n        if i == 'L':\n            print('Turn left!')\n        elif i == 'R':\n            print('Turn right!')\n        elif i == 'W':\n            return 'Poseidon is my dad?!'\n    return 'Made it back!'",
            "durations": 163.429,
            "keystrokes": 297,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    result = ''\n    for i in directions[::-1]:\n        if i == 'L':\n            print('Turn left!')\n        elif i == 'R':\n            print('Turn right!')\n        elif i == 'W':\n            return 'Poseidon is my dad?!'\n    return 'Made it back!'",
            "durations": 237.018,
            "keystrokes": 319,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    result = ''\n    for i in directions[::-1]:\n        if i == 'L':\n            print('Turn left!')\n        elif i == 'R':\n            print('Turn right!')\n        elif i == 'W':\n            return 'Poseidon is my dad?!'\n    return 'Made it back!'",
            "durations": 237.018,
            "keystrokes": 319,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    result = []\n    for i in directions[::-1]:\n        if i == 'L':\n            result.append('Turn left!')\n        elif i == 'R':\n            result.append('Turn right!')\n        elif i == 'W':\n            result.append('Poseidon is my dad?!')\n            return result\n    result.append('Made it back!')\n    return result",
            "durations": 301.304,
            "keystrokes": 425,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    result = []\n    for i in directions[::-1]:\n        if i == 'L':\n            result.append('Turn left!')\n        elif i == 'R':\n            result.append('Turn right!')\n        elif i == 'W':\n            result.append('Poseidon is my dad?!')\n            return result\n    result.append('Made it back!')\n    return result",
            "durations": 301.304,
            "keystrokes": 425,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 15
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(orderNumbers, orderLength):\n    num = ''\n    if len(orderNumbers) < orderLength:\n        return 'Slow day today!'\n    for i in range(0, len(orderNumbers), orderLength):\n        if orderNumbers[i:i+orderLength][0] == '1' and  orderNumbers[i:i+orderLength][-1] == '1':\n            num += orderNumbers[i:i+orderLength]\n    if num:\n        return num\n    else:\n        return 'Slow day today!'",
            "durations": 337.388,
            "keystrokes": 859,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(orderNumbers, orderLength):\n    num = ''\n    if len(orderNumbers) < orderLength:\n        return 'Slow day today!'\n    for i in range(0, len(orderNumbers), orderLength):\n        if orderNumbers[i:i+orderLength][0] == '1' and  orderNumbers[i:i+orderLength][-1] == '1':\n            num += orderNumbers[i:i+orderLength]\n    if num:\n        return num\n    else:\n        return 'Slow day today!'",
            "durations": 337.388,
            "keystrokes": 859,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 5,
            "current_problem": 16
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(j):\n    u = ''\n    for i, char in enumerate(j):\n        if i % 2 == 0 and char.isalpha():\n            u += char\n    return u",
            "durations": 86.4472,
            "keystrokes": 213,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(j):\n    u = ''\n    for i, char in enumerate(j):\n        if i % 2 == 0 and char.isalpha():\n            u += char\n    return u",
            "durations": 86.4472,
            "keystrokes": 213,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(loveLetter):\n    lower = 0\n    upper = 0\n    for i in loveLetter:\n        if i.isalpha() and i.islower():\n            lower += 1\n        elif: i.isalpha() and i.isupper():\n            upper += 1\n    if lower == upper:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif lower > upper:\n        return f\"Sweetheart, I need {lower-upper} more uppercase character(s) in our love tale.\"\n    else:\n        return f\"Darling, I need {upper-lower} more lowercase character(s) in our love story.\"",
            "durations": 180.934,
            "keystrokes": 642,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(loveLetter):\n    lower = 0\n    upper = 0\n    for i in loveLetter:\n        if i.isalpha() and i.islower():\n            lower += 1\n        elif: i.isalpha() and i.isupper():\n            upper += 1\n    if lower == upper:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif lower > upper:\n        return f\"Sweetheart, I need {lower-upper} more uppercase character(s) in our love tale.\"\n    else:\n        return f\"Darling, I need {upper-lower} more lowercase character(s) in our love story.\"",
            "durations": 180.934,
            "keystrokes": 642,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(loveLetter):\n    lower = 0\n    upper = 0\n    for i in loveLetter:\n        if i.isalpha() and i.islower():\n            lower += 1\n        elif i.isalpha() and i.isupper():\n            upper += 1\n    if lower == upper:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif lower > upper:\n        return f\"Sweetheart, I need {lower-upper} more uppercase character(s) in our love tale.\"\n    else:\n        return f\"Darling, I need {upper-lower} more lowercase character(s) in our love story.\"",
            "durations": 188.929,
            "keystrokes": 645,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(loveLetter):\n    lower = 0\n    upper = 0\n    for i in loveLetter:\n        if i.isalpha() and i.islower():\n            lower += 1\n        elif i.isalpha() and i.isupper():\n            upper += 1\n    if lower == upper:\n        return \"Our love story is perfectly balanced, just like us.\"\n    elif lower > upper:\n        return f\"Sweetheart, I need {lower-upper} more uppercase character(s) in our love tale.\"\n    else:\n        return f\"Darling, I need {upper-lower} more lowercase character(s) in our love story.\"",
            "durations": 188.929,
            "keystrokes": 645,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(e, key):\n    d = ''\n    for i, char in enumerate(e):\n        if i % key == 0:\n            d = char + d\n    return d",
            "durations": 92.2547,
            "keystrokes": 240,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(e, key):\n    d = ''\n    for i, char in enumerate(e):\n        if i % key == 0:\n            d = char + d\n    return d",
            "durations": 92.2547,
            "keystrokes": 240,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for info in candidates:\n        if info[1] == favCity:\n            if info[2] in favColors:\n                matches.append(info[0])\n    return matches",
            "durations": 115.573,
            "keystrokes": 249,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for info in candidates:\n        if info[1] == favCity:\n            if info[2] in favColors:\n                matches.append(info[0])\n    return matches",
            "durations": 115.573,
            "keystrokes": 249,
            "attempts": 1,
            "test_case_accuracy": 0.8,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 19
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for info in candidates:\n        if info[1] == favCity:\n            if info[2] in favColors:\n                matches.append(info[0])\n    return sorted(matches)",
            "durations": 126.241,
            "keystrokes": 257,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(candidates, favCity, favColors):\n    matches = []\n    for info in candidates:\n        if info[1] == favCity:\n            if info[2] in favColors:\n                matches.append(info[0])\n    return sorted(matches)",
            "durations": 126.241,
            "keystrokes": 257,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 19
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    shared = []\n    for i in yourList:\n        if i in friendList:\n            shared.append(i)\n    shared.sort()\n    if shared:\n        return shared\n    else:\n        return \"Whatever, we'll go to Nave.\"",
            "durations": 91.0,
            "keystrokes": 310,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(yourList, friendList):\n    shared = []\n    for i in yourList:\n        if i in friendList:\n            shared.append(i)\n    shared.sort()\n    if shared:\n        return shared\n    else:\n        return \"Whatever, we'll go to Nave.\"",
            "durations": 91.0,
            "keystrokes": 310,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inventions):\n    completed = 0\n    for inf in inventions:\n        if inf[1]:\n            completed += 1\n    if completed:\n        return completed\n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 4098.45,
            "keystrokes": 283,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions):\n    completed = 0\n    for inf in inventions:\n        if inf[1]:\n            completed += 1\n    if completed:\n        return completed\n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 4098.45,
            "keystrokes": 283,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 10,
            "current_problem": 20
        },
        "action": 5,
        "next_state": {
            "submission_history": "def creditHours(courseCatalog, myCourses):\n    tot = 0\n    for subdict in myCourses:\n        for course, num in subdict.items():\n            tot += courseCatalog[course][num]\n            \n    return tot",
            "durations": 152.916,
            "keystrokes": 230,
            "attempts": 1,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 5
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def creditHours(courseCatalog, myCourses):\n    tot = 0\n    for subdict in myCourses:\n        for course, num in subdict.items():\n            tot += courseCatalog[course][num]\n            \n    return tot",
            "durations": 152.916,
            "keystrokes": 230,
            "attempts": 1,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 5
        },
        "action": 5,
        "next_state": {
            "submission_history": "def creditHours(courseCatalog, myCourses):\n    tot = 0\n    for course, num in myCourses.items():\n        tot += courseCatalog[course][num]\n            \n    return tot",
            "durations": 245.477,
            "keystrokes": 270,
            "attempts": 2,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 5
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def creditHours(courseCatalog, myCourses):\n    tot = 0\n    for course, num in myCourses.items():\n        tot += courseCatalog[course][num]\n            \n    return tot",
            "durations": 245.477,
            "keystrokes": 270,
            "attempts": 2,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 3,
            "current_problem": 5
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if listOfShops == []:\n        return {}\n    else:\n        shopsToVisit = atlCoffee(listOfShops[1:])\n        shop, loc, rating = listOfShops[0]\n        if rating > 5:\n            if loc in shopsToVisit:\n                shopsToVisit[loc].append(shop)\n            else:\n                shopsToVisit[loc] = [shop]\n        shopsToVisit.sort()\n        return shopsToVisit",
            "durations": 229.508,
            "keystrokes": 477,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if listOfShops == []:\n        return {}\n    else:\n        shopsToVisit = atlCoffee(listOfShops[1:])\n        shop, loc, rating = listOfShops[0]\n        if rating > 5:\n            if loc in shopsToVisit:\n                shopsToVisit[loc].append(shop)\n            else:\n                shopsToVisit[loc] = [shop]\n        shopsToVisit.sort()\n        return shopsToVisit",
            "durations": 229.508,
            "keystrokes": 477,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if listOfShops == []:\n        return {}\n    else:\n        shopsToVisit = atlCoffee(listOfShops[1:])\n        shop, loc, rating = listOfShops[0]\n        if rating > 5:\n            if loc in shopsToVisit:\n                shopsToVisit[loc].append(shop)\n            else:\n                shopsToVisit[loc] = [shop]\n        shopsToVisit[loc].sort()\n        return shopsToVisit",
            "durations": 238.21,
            "keystrokes": 482,
            "attempts": 2,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if listOfShops == []:\n        return {}\n    else:\n        shopsToVisit = atlCoffee(listOfShops[1:])\n        shop, loc, rating = listOfShops[0]\n        if rating > 5:\n            if loc in shopsToVisit:\n                shopsToVisit[loc].append(shop)\n            else:\n                shopsToVisit[loc] = [shop]\n        shopsToVisit[loc].sort()\n        return shopsToVisit",
            "durations": 238.21,
            "keystrokes": 482,
            "attempts": 2,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if listOfShops == []:\n        return {}\n    else:\n        shopsToVisit = atlCoffee(listOfShops[1:])\n        shop, loc, rating = listOfShops[0]\n        if rating > 5:\n            if loc in shopsToVisit:\n                shopsToVisit[loc].append(shop)\n                shopsToVisit[loc].sort()\n            else:\n                shopsToVisit[loc] = [shop]\n        shopsToVisit[loc].sort()\n        return shopsToVisit",
            "durations": 320.939,
            "keystrokes": 523,
            "attempts": 3,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if listOfShops == []:\n        return {}\n    else:\n        shopsToVisit = atlCoffee(listOfShops[1:])\n        shop, loc, rating = listOfShops[0]\n        if rating > 5:\n            if loc in shopsToVisit:\n                shopsToVisit[loc].append(shop)\n                shopsToVisit[loc].sort()\n            else:\n                shopsToVisit[loc] = [shop]\n        shopsToVisit[loc].sort()\n        return shopsToVisit",
            "durations": 320.939,
            "keystrokes": 523,
            "attempts": 3,
            "test_case_accuracy": 0.8,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfshops):\r\n    if listOfshops == []:\r\n        return {}   #base case\r\n    else:\r\n        shopsToVisit = atlCoffee(listOfshops[1:])   #step\r\n        #only add if rating is high enough\r\n        if listOfshops[0][2] > 3:\r\n            #dictionary adding schenanigans\r\n            if listOfshops[0][1] in shopsToVisit:\r\n                shopsToVisit[listOfshops[0][1]].append(listOfshops[0][0])\r\n                shopsToVisit[listOfshops[0][1]].sort()\r\n            else:\r\n                shopsToVisit[listOfshops[0][1]] = [listOfshops[0][0]]\r\n\r\n    return shopsToVisit",
            "durations": 380.809,
            "keystrokes": 659,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfshops):\r\n    if listOfshops == []:\r\n        return {}   #base case\r\n    else:\r\n        shopsToVisit = atlCoffee(listOfshops[1:])   #step\r\n        #only add if rating is high enough\r\n        if listOfshops[0][2] > 3:\r\n            #dictionary adding schenanigans\r\n            if listOfshops[0][1] in shopsToVisit:\r\n                shopsToVisit[listOfshops[0][1]].append(listOfshops[0][0])\r\n                shopsToVisit[listOfshops[0][1]].sort()\r\n            else:\r\n                shopsToVisit[listOfshops[0][1]] = [listOfshops[0][0]]\r\n\r\n    return shopsToVisit",
            "durations": 380.809,
            "keystrokes": 659,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    teamDict = {}\n    for i in range(teams):\n        available = []\n        for name, cost in drivers:\n            if cost <= teamBudget[i]:\n                available.append(name)\n                available.sort()\n        teamDict[teams[i]] = available\n    return teamDict",
            "durations": 148.164,
            "keystrokes": 358,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    teamDict = {}\n    for i in range(teams):\n        available = []\n        for name, cost in drivers:\n            if cost <= teamBudget[i]:\n                available.append(name)\n                available.sort()\n        teamDict[teams[i]] = available\n    return teamDict",
            "durations": 148.164,
            "keystrokes": 358,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    teamDict = {}\n    for i in range(len(teams)):\n        available = []\n        for name, cost in drivers:\n            if cost <= teamBudget[i]:\n                available.append(name)\n                available.sort()\n        teamDict[teams[i]] = available\n    return teamDict",
            "durations": 314.797,
            "keystrokes": 363,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers(drivers, teams, teamBudget):\n    teamDict = {}\n    for i in range(len(teams)):\n        available = []\n        for name, cost in drivers:\n            if cost <= teamBudget[i]:\n                available.append(name)\n                available.sort()\n        teamDict[teams[i]] = available\n    return teamDict",
            "durations": 314.797,
            "keystrokes": 363,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [place]\n            spot[place].sort()\n    return spot",
            "durations": 124.34,
            "keystrokes": 392,
            "attempts": 1,
            "test_case_accuracy": 0.16666666666666666,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [place]\n            spot[place].sort()\n    return spot",
            "durations": 124.34,
            "keystrokes": 392,
            "attempts": 1,
            "test_case_accuracy": 0.16666666666666666,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [friend]\n            spot[place].sort()\n    return spot",
            "durations": 161.105,
            "keystrokes": 393,
            "attempts": 2,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [friend]\n            spot[place].sort()\n    return spot",
            "durations": 161.105,
            "keystrokes": 393,
            "attempts": 2,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [friend]\n            spot[place].sort()\n    return spot",
            "durations": 304.335,
            "keystrokes": 393,
            "attempts": 3,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [friend]\n            spot[place].sort()\n    return spot",
            "durations": 304.335,
            "keystrokes": 393,
            "attempts": 3,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [friend]\n            spot[place].sort()\n    return spot",
            "durations": 307.962,
            "keystrokes": 393,
            "attempts": 4,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place in spot:\n                spot[place].append(friend)\n            else:\n                spot[place] = [friend]\n            spot[place].sort()\n    return spot",
            "durations": 307.962,
            "keystrokes": 393,
            "attempts": 4,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place == 2 and name == 'Vaidehi':\n                pass\n            else:\n                if place in spot:\n                    spot[place].append(friend)\n                else:\n                    spot[place] = [friend]\n                spot[place].sort()\n    return spot",
            "durations": 353.061,
            "keystrokes": 501,
            "attempts": 5,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place == 2 and name == 'Vaidehi':\n                pass\n            else:\n                if place in spot:\n                    spot[place].append(friend)\n                else:\n                    spot[place] = [friend]\n                spot[place].sort()\n    return spot",
            "durations": 353.061,
            "keystrokes": 501,
            "attempts": 5,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place == 2 and friend == 'Vaidehi':\n                pass\n            else:\n                if place in spot:\n                    spot[place].append(friend)\n                else:\n                    spot[place] = [friend]\n                spot[place].sort()\n    return spot",
            "durations": 362.209,
            "keystrokes": 503,
            "attempts": 6,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place == 2 and friend == 'Vaidehi':\n                pass\n            else:\n                if place in spot:\n                    spot[place].append(friend)\n                else:\n                    spot[place] = [friend]\n                spot[place].sort()\n    return spot",
            "durations": 362.209,
            "keystrokes": 503,
            "attempts": 6,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "action": 4,
        "next_state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place == 2 and friend == 'Vaidehi':\n                continue\n            else:\n                if place in spot:\n                    spot[place].append(friend)\n                else:\n                    spot[place] = [friend]\n                spot[place].sort()\n    return spot",
            "durations": 370.757,
            "keystrokes": 509,
            "attempts": 7,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def lunchSpots(friendsPreferences):\n    spot = {}\n    for friend, places in friendsPreferences.items():\n        for place in places:\n            if place == 2 and friend == 'Vaidehi':\n                continue\n            else:\n                if place in spot:\n                    spot[place].append(friend)\n                else:\n                    spot[place] = [friend]\n                spot[place].sort()\n    return spot",
            "durations": 370.757,
            "keystrokes": 509,
            "attempts": 7,
            "test_case_accuracy": 0.8333333333333334,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 4
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee']\n    coffeeOutput = [f'Coffees left: {num}']numCoffees(num - 1)\n    return coffeeOutput",
            "durations": 139.166,
            "keystrokes": 274,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee']\n    coffeeOutput = [f'Coffees left: {num}']numCoffees(num - 1)\n    return coffeeOutput",
            "durations": 139.166,
            "keystrokes": 274,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee']\n    coffeeOutput = [f'Coffees left: {num}'] + numCoffees(num - 1)\n    return coffeeOutput",
            "durations": 151.095,
            "keystrokes": 277,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee']\n    coffeeOutput = [f'Coffees left: {num}'] + numCoffees(num - 1)\n    return coffeeOutput",
            "durations": 151.095,
            "keystrokes": 277,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee!']\n    coffeeOutput = [f'Coffees left: {num}'] + numCoffees(num - 1)\n    return coffeeOutput",
            "durations": 168.633,
            "keystrokes": 278,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee!']\n    coffeeOutput = [f'Coffees left: {num}'] + numCoffees(num - 1)\n    return coffeeOutput",
            "durations": 168.633,
            "keystrokes": 278,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\n    if teamList == []:\n        count = 0\n        return [[]]\n    fouls = foulCount[1:]\n    if teamList[0][1] > 25:\n        fouls[0].append(f'{teamList[0][0]} has too many fouls!')\n    elif teamList[0][1] < 0:\n        fouls[0].append(f'{teamList[0][0]} has an incorrect foul count')\n    fouls[1] += teamList[0][1]\n    return fouls",
            "durations": 769.845,
            "keystrokes": 502,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\n    if teamList == []:\n        count = 0\n        return [[]]\n    fouls = foulCount[1:]\n    if teamList[0][1] > 25:\n        fouls[0].append(f'{teamList[0][0]} has too many fouls!')\n    elif teamList[0][1] < 0:\n        fouls[0].append(f'{teamList[0][0]} has an incorrect foul count')\n    fouls[1] += teamList[0][1]\n    return fouls",
            "durations": 769.845,
            "keystrokes": 502,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0].append(f'{teamList[0][0]} has too many fouls!')\r\n    elif teamList[0][1] < 0:\r\n        fouls[0].append(f'{teamList[0][0]} has an incorrect foul count')\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1040.97,
            "keystrokes": 528,
            "attempts": 2,
            "test_case_accuracy": 0.4,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0].append(f'{teamList[0][0]} has too many fouls!')\r\n    elif teamList[0][1] < 0:\r\n        fouls[0].append(f'{teamList[0][0]} has an incorrect foul count')\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1040.97,
            "keystrokes": 528,
            "attempts": 2,
            "test_case_accuracy": 0.4,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0] = [(f'{teamList[0][0]} has too many fouls!')] + fouls[0]\r\n    elif teamList[0][1] < 0:\r\n        fouls[0] = [(f'{teamList[0][0]} has an incorrect foul count')] + fouls[0]\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1078.56,
            "keystrokes": 570,
            "attempts": 3,
            "test_case_accuracy": 0.4,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0] = [(f'{teamList[0][0]} has too many fouls!')] + fouls[0]\r\n    elif teamList[0][1] < 0:\r\n        fouls[0] = [(f'{teamList[0][0]} has an incorrect foul count')] + fouls[0]\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1078.56,
            "keystrokes": 570,
            "attempts": 3,
            "test_case_accuracy": 0.4,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0] = [(f'{teamList[0][0]} has too many fouls!')] + fouls[0]\r\n    elif teamList[0][1] < 0:\r\n        fouls[0] = [(f'{teamList[0][0]} has an incorrect foul count.')] + fouls[0]\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1121.71,
            "keystrokes": 571,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0] = [(f'{teamList[0][0]} has too many fouls!')] + fouls[0]\r\n    elif teamList[0][1] < 0:\r\n        fouls[0] = [(f'{teamList[0][0]} has an incorrect foul count.')] + fouls[0]\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1121.71,
            "keystrokes": 571,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0] = [(f'{teamList[0][0]} has too many fouls!')] + fouls[0]\r\n    elif teamList[0][1] < 0:\r\n        fouls[0] = [(f'{teamList[0][0]} has an incorrect foul count.')] + fouls[0]\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1127.72,
            "keystrokes": 571,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(teamList):\r\n    if teamList == []:\r\n        return [[],0]\r\n    print(teamList)\r\n    fouls = foulCount(teamList[1:])\r\n    if teamList[0][1] > 25:\r\n        fouls[0] = [(f'{teamList[0][0]} has too many fouls!')] + fouls[0]\r\n    elif teamList[0][1] < 0:\r\n        fouls[0] = [(f'{teamList[0][0]} has an incorrect foul count.')] + fouls[0]\r\n    fouls[1] += teamList[0][1]\r\n    return fouls\r\n",
            "durations": 1127.72,
            "keystrokes": 571,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "from requests import get as g\ndef shareBorder(country1:str, country2:str) -> bool:\n    \"\"\"Return True if the two countries share a border, or False if not.\"\"\"\n    url1 = f\"https://restcountries.com/v3.1/name/{country1}?fullText=true\"\n    url2 = f\"https://restcountries.com/v3.1/name/{country2}?fullText=true\"\n\n    response = g(url1)\n    data = response.json()[0] # dict\n\n    try:\n        borders = data['borders']\n    except:\n        return False\n    \n    response = g(url2)\n    data = response.json()[0]\n\n    try:\n        if data['cioc'] in borders:\n            return True\n    except:\n        return False\n    \n    return False",
            "durations": 24.3014,
            "keystrokes": 3737,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 0,
            "current_problem": 8
        },
        "action": -1,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    listOfShops.sort()\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = listOfShops[0][0]\n        else:\n            shopsToVisit[listOfShops[0][1]] += listOfShops[0][0]\n    return listOfShops",
            "durations": 242.44,
            "keystrokes": 476,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfShops):\n    listOfShops.sort()\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = listOfShops[0][0]\n        else:\n            shopsToVisit[listOfShops[0][1]] += listOfShops[0][0]\n    return listOfShops",
            "durations": 379.846,
            "keystrokes": 476,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    listOfShops.sort()\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = listOfShops[0][0]\n        else:\n            shopsToVisit[listOfShops[0][1]] += listOfShops[0][0]\n    return listOfShops",
            "durations": 379.846,
            "keystrokes": 476,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfShops):\n    listOfShops.sort()\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = listOfShops[0][0]\n        else:\n            shopsToVisit[listOfShops[0][1]] += listOfShops[0][0]\n    return shopsToVisit",
            "durations": 395.175,
            "keystrokes": 497,
            "attempts": 3,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    listOfShops.sort()\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = listOfShops[0][0]\n        else:\n            shopsToVisit[listOfShops[0][1]] += listOfShops[0][0]\n    return shopsToVisit",
            "durations": 395.175,
            "keystrokes": 497,
            "attempts": 3,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfShops):\n    listOfShops.sort()\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = [listOfShops[0][0]]\n        else:\n            shopsToVisit[listOfShops[0][1]] += [listOfShops[0][0]]\n    return shopsToVisit",
            "durations": 423.295,
            "keystrokes": 501,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    listOfShops.sort()\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = [listOfShops[0][0]]\n        else:\n            shopsToVisit[listOfShops[0][1]] += [listOfShops[0][0]]\n    return shopsToVisit",
            "durations": 423.295,
            "keystrokes": 501,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = [listOfShops[0][0]]\n            shopsToVisit[listOfShops[0][1]].sort()\n        else:\n            shopsToVisit[listOfShops[0][1]] += [listOfShops[0][0]]\n            shopsToVisit[listOfShops[0][1]].sort()\n    return shopsToVisit",
            "durations": 491.994,
            "keystrokes": 626,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(listOfShops):\n    if len(listOfShops) == 0:\n        return {}\n    shopsToVisit = atlCoffee(listOfShops[1:])\n    if listOfShops[0][2] > 5:\n        if listOfShops[0][1] not in shopsToVisit:\n            shopsToVisit[listOfShops[0][1]] = [listOfShops[0][0]]\n            shopsToVisit[listOfShops[0][1]].sort()\n        else:\n            shopsToVisit[listOfShops[0][1]] += [listOfShops[0][0]]\n            shopsToVisit[listOfShops[0][1]].sort()\n    return shopsToVisit",
            "durations": 491.994,
            "keystrokes": 626,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def foulCount(fouls):\n    if not fouls:\n        return []\n    else:\n        (team, foulNum) = fouls[0]\n        if foulNum > 25:\n            return f\"{team} has too many fouls!\"\n        elif foulNum < 0:\n            return f\"{team} has an incorrect foul count\"\n        return foulNum + foulCount(fouls[1:])\n        ",
            "durations": 199.067,
            "keystrokes": 396,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(fouls):\n    if not fouls:\n        return []\n    else:\n        (team, foulNum) = fouls[0]\n        aList = [[], 0]\n        if foulNum > 25:\n            aList[0].append(f\"{team} has too many fouls!\")\n        elif foulNum < 0:\n            aList[0].append(f\"{team} has an incorrect foul count\")\n        return foulNum + foulCount(fouls[1:])\n        ",
            "durations": 311.711,
            "keystrokes": 484,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(fouls):\n    if not fouls:\n        return []\n    else:\n        (team, foulNum) = fouls[0]\n        aList = [[], 0]\n        if foulNum > 25:\n            aList[0].append(f\"{team} has too many fouls!\")\n        elif foulNum < 0:\n            aList[0].append(f\"{team} has an incorrect foul count\")\n        return foulNum + foulCount(fouls[1:])\n        ",
            "durations": 311.711,
            "keystrokes": 484,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def toCook(classes, money):\n    if classes > 3 and money > 10:\n        return \"Let's get Panda Express!\"\n    elif classes <= 3 and money >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 155.008,
            "keystrokes": 309,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 2,
            "current_problem": 12
        },
        "action": 12,
        "next_state": {
            "submission_history": "def toCook(classes, money):\n    if classes > 3 and money > 10:\n        return \"Let's get Panda Express!\"\n    elif classes <= 3 and money >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 159.338,
            "keystrokes": 309,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 12
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def toCook(classes, money):\n    if classes > 3 and money > 10:\n        return \"Let's get Panda Express!\"\n    elif classes <= 3 and money >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"",
            "durations": 159.338,
            "keystrokes": 309,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 12
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(order, amount):\n    for i in range(:len(order):amount):\n        if order[i]==1 and if order[i+amount-1]== 1:\n            return order[i:i+amount]\n    return \"Slow day today!\"",
            "durations": 362.758,
            "keystrokes": 336,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(order, amount):\n    for i in range(:len(order):amount):\n        if order[i]==1 and if order[i+amount-1]== 1:\n            return order[i:i+amount]\n    return \"Slow day today!\"",
            "durations": 362.758,
            "keystrokes": 336,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(order, amount):\n    for i in range(0:len(order):amount):\n        if order[i]==1 and if order[i+amount-1]== 1:\n            return order[i:i+amount]\n    return \"Slow day today!\"",
            "durations": 398.403,
            "keystrokes": 337,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(order, amount):\n    for i in range(0:len(order):amount):\n        if order[i]==1 and if order[i+amount-1]== 1:\n            return order[i:i+amount]\n    return \"Slow day today!\"",
            "durations": 398.403,
            "keystrokes": 337,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": {
            "submission_history": "def gnomeAccounting(order, amount):\n    for i in range(0:len(order):amount):\n        if order[i]==1 and order[i+amount-1] == 1:\n            return order[i:i+amount]\n    return \"Slow day today!\"",
            "durations": 453.053,
            "keystrokes": 341,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 16
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def gnomeAccounting(order, amount):\n    for i in range(0:len(order):amount):\n        if order[i]==1 and order[i+amount-1] == 1:\n            return order[i:i+amount]\n    return \"Slow day today!\"",
            "durations": 453.053,
            "keystrokes": 341,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 16
        },
        "action": 16,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num == 0:\n        print(\"No more coffee!\")\n    else:\n        print(f\"Coffees left: {num}\")\n        return numCoffees(num-1)\n\nnumCoffees(4)\n",
            "durations": 115.886,
            "keystrokes": 203,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return [f\"Coffees left: {num}\"] + numCoffees(num-1)\n\n\n",
            "durations": 218.642,
            "keystrokes": 307,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return [f\"Coffees left: {num}\"] + numCoffees(num-1)\n\n\n",
            "durations": 218.642,
            "keystrokes": 307,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 8,
            "current_problem": 10
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        return {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopDict[1]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n        return shopDict",
            "durations": 161.376,
            "keystrokes": 356,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        return {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopDict[1]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n        return shopDict",
            "durations": 161.376,
            "keystrokes": 356,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopDict[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n    return shopDict",
            "durations": 196.592,
            "keystrokes": 378,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopDict[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n    return shopDict",
            "durations": 196.592,
            "keystrokes": 378,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopDict[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n            shopDict[loc].sort()\n        \n    return shopDict",
            "durations": 238.951,
            "keystrokes": 430,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopDict[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n            shopDict[loc].sort()\n        \n    return shopDict",
            "durations": 238.951,
            "keystrokes": 430,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopList[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n            shopDict[loc].sort()\n        \n    return shopDict",
            "durations": 367.812,
            "keystrokes": 436,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopList[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n            shopDict[loc].sort()\n        \n    return shopDict",
            "durations": 367.812,
            "keystrokes": 436,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopList[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n            shopDict[loc] = sorted(shopDict[loc])\n        \n    return shopDict",
            "durations": 414.952,
            "keystrokes": 469,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopList[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc] += name\n            shopDict[loc] = sorted(shopDict[loc])\n        \n    return shopDict",
            "durations": 414.952,
            "keystrokes": 469,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopList[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc].append(name)\n            shopDict[loc].sort()\n        \n    return shopDict",
            "durations": 452.66,
            "keystrokes": 515,
            "attempts": 6,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(shopList):\n    if not shopList:\n        shopDict = {}\n    else:\n        shopDict = atlCoffee(shopList[1:])\n        name, loc, rate = shopList[0]\n        if rate > 5:\n            if loc not in shopDict:\n                shopDict[loc] = []\n            shopDict[loc].append(name)\n            shopDict[loc].sort()\n        \n    return shopDict",
            "durations": 452.66,
            "keystrokes": 515,
            "attempts": 6,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def findDrivers",
            "durations": 9.191,
            "keystrokes": 21,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 3,
            "current_problem": 21
        },
        "action": -1,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return []\n    else:\n        count += fouls\n        (team, fouls) = aList[0]\n        if fouls > 25:\n            aList = [count] + [f\"{team} has too many fouls!\"]+ countfoulCount(aList[1:])\n        elif fouls < 0:\n            aList = [count] + [f\"{team} has an incorrect foul count\"]+ countfoulCount(aList[1:])\n        else:\n            aList = [count]\n\n        return aList\n        \n        \n",
            "durations": 329.85,
            "keystrokes": 769,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return []\n    else:\n        count = 0\n        count += fouls\n        (team, fouls) = aList[0]\n        if fouls > 25:\n            aList = [count] + [f\"{team} has too many fouls!\"]+ countfoulCount(aList[1:])\n        elif fouls < 0:\n            aList = [count] + [f\"{team} has an incorrect foul count\"]+ countfoulCount(aList[1:])\n        else:\n            aList = [count]\n\n        return aList\n        \n        \n",
            "durations": 339.698,
            "keystrokes": 787,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return []\n    else:\n        count = 0\n        count += fouls\n        (team, fouls) = aList[0]\n        if fouls > 25:\n            aList = [count] + [f\"{team} has too many fouls!\"]+ countfoulCount(aList[1:])\n        elif fouls < 0:\n            aList = [count] + [f\"{team} has an incorrect foul count\"]+ countfoulCount(aList[1:])\n        else:\n            aList = [count]\n\n        return aList\n        \n        \n",
            "durations": 339.698,
            "keystrokes": 787,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return []\n    else:\n        count = 0\n        (team, fouls) = aList[0]\n        count += fouls\n        if fouls > 25:\n            aList = [count] + [f\"{team} has too many fouls!\"]+ countfoulCount(aList[1:])\n        elif fouls < 0:\n            aList = [count] + [f\"{team} has an incorrect foul count\"]+ countfoulCount(aList[1:])\n        else:\n            aList = [count]\n\n        return aList\n        \n        \n",
            "durations": 355.674,
            "keystrokes": 853,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return []\n    else:\n        count = 0\n        (team, fouls) = aList[0]\n        count += fouls\n        if fouls > 25:\n            aList = [count] + [f\"{team} has too many fouls!\"]+ countfoulCount(aList[1:])\n        elif fouls < 0:\n            aList = [count] + [f\"{team} has an incorrect foul count\"]+ countfoulCount(aList[1:])\n        else:\n            aList = [count]\n\n        return aList\n        \n        \n",
            "durations": 355.674,
            "keystrokes": 853,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return [[],0]\n    else:\n        count = 0\n        (team, fouls) = aList[0]\n        [alerts, totalFouls] = foulCount(aList[1:])\n        if fouls > 25:\n            alerts = [f\"{team} has too many fouls!\"] + alerts\n        elif fouls < 0:\n            alerts = [f\"{team} has an incorrect foul count\"]+ alerts\n    \n\n        return [alerts, totalFouls+fouls]\n        \n        \n",
            "durations": 622.563,
            "keystrokes": 1111,
            "attempts": 4,
            "test_case_accuracy": 0.4,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return [[],0]\n    else:\n        count = 0\n        (team, fouls) = aList[0]\n        [alerts, totalFouls] = foulCount(aList[1:])\n        if fouls > 25:\n            alerts = [f\"{team} has too many fouls!\"] + alerts\n        elif fouls < 0:\n            alerts = [f\"{team} has an incorrect foul count\"]+ alerts\n    \n\n        return [alerts, totalFouls+fouls]\n        \n        \n",
            "durations": 622.563,
            "keystrokes": 1111,
            "attempts": 4,
            "test_case_accuracy": 0.4,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return [[],0]\n    else:\n        count = 0\n        (team, fouls) = aList[0]\n        [alerts, totalFouls] = foulCount(aList[1:])\n        if fouls > 25:\n            alerts = [f\"{team} has too many fouls!\"] + alerts\n        elif fouls < 0:\n            alerts = [f\"{team} has an incorrect foul count.\"]+ alerts\n    \n\n        return [alerts, totalFouls+fouls]\n        \n        \n",
            "durations": 645.307,
            "keystrokes": 1112,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(aList):\n    if not aList:\n        return [[],0]\n    else:\n        count = 0\n        (team, fouls) = aList[0]\n        [alerts, totalFouls] = foulCount(aList[1:])\n        if fouls > 25:\n            alerts = [f\"{team} has too many fouls!\"] + alerts\n        elif fouls < 0:\n            alerts = [f\"{team} has an incorrect foul count.\"]+ alerts\n    \n\n        return [alerts, totalFouls+fouls]\n        \n        \n",
            "durations": 645.307,
            "keystrokes": 1112,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 4,
            "topic": 8,
            "current_problem": 22
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append(team, price)\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    \n    return aDict\n        ",
            "durations": 394.995,
            "keystrokes": 846,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append(team, price)\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    \n    return aDict\n        ",
            "durations": 394.995,
            "keystrokes": 846,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append(team, price)\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams] += driver\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    \n    return aDict\n        ",
            "durations": 409.459,
            "keystrokes": 859,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append(team, price)\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams] += driver\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    \n    return aDict\n        ",
            "durations": 409.459,
            "keystrokes": 859,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    \n    return aDict\n        ",
            "durations": 428.87,
            "keystrokes": 876,
            "attempts": 3,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    \n    return aDict\n        ",
            "durations": 428.87,
            "keystrokes": 876,
            "attempts": 3,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 496.152,
            "keystrokes": 1013,
            "attempts": 4,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 496.152,
            "keystrokes": 1013,
            "attempts": 4,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] += []\n    return aDict\n        ",
            "durations": 515.069,
            "keystrokes": 1014,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] += []\n    return aDict\n        ",
            "durations": 515.069,
            "keystrokes": 1014,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                if teams in aDict:\n                    aDict[teams].append([])\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n    return aDict\n        ",
            "durations": 546.911,
            "keystrokes": 1252,
            "attempts": 6,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = list_budget[index]\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                if teams in aDict:\n                    aDict[teams].append([])\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n    return aDict\n        ",
            "durations": 546.911,
            "keystrokes": 1252,
            "attempts": 6,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, int(budget) in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                if teams in aDict:\n                    aDict[teams].append([])\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n    return aDict\n        ",
            "durations": 584.686,
            "keystrokes": 1264,
            "attempts": 7,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, int(budget) in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                if teams in aDict:\n                    aDict[teams].append([])\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n    return aDict\n        ",
            "durations": 584.686,
            "keystrokes": 1264,
            "attempts": 7,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, int(budget) in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n    return aDict\n        ",
            "durations": 597.102,
            "keystrokes": 1461,
            "attempts": 8,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, int(budget) in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= budget:\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n    return aDict\n        ",
            "durations": 597.102,
            "keystrokes": 1461,
            "attempts": 8,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n    return aDict\n        ",
            "durations": 615.197,
            "keystrokes": 1471,
            "attempts": 9,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n    return aDict\n        ",
            "durations": 615.197,
            "keystrokes": 1471,
            "attempts": 9,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 655.292,
            "keystrokes": 1539,
            "attempts": 10,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 655.292,
            "keystrokes": 1539,
            "attempts": 10,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] += []\n    return aDict\n        ",
            "durations": 665.634,
            "keystrokes": 1544,
            "attempts": 11,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] += []\n    return aDict\n        ",
            "durations": 665.634,
            "keystrokes": 1544,
            "attempts": 11,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 669.454,
            "keystrokes": 1545,
            "attempts": 12,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 669.454,
            "keystrokes": 1545,
            "attempts": 12,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 690.695,
            "keystrokes": 1593,
            "attempts": 13,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                aDict[teams] = []\n    return aDict\n        ",
            "durations": 690.695,
            "keystrokes": 1593,
            "attempts": 13,
            "test_case_accuracy": 0.4,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams].append([])\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 711.402,
            "keystrokes": 1798,
            "attempts": 14,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams].append([])\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 711.402,
            "keystrokes": 1798,
            "attempts": 14,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams].append()\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 728.348,
            "keystrokes": 1800,
            "attempts": 15,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams].append()\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 728.348,
            "keystrokes": 1800,
            "attempts": 15,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams].append(\"\")\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 734.37,
            "keystrokes": 1802,
            "attempts": 16,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams].append(\"\")\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 734.37,
            "keystrokes": 1802,
            "attempts": 16,
            "test_case_accuracy": 0.2,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams] += []\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 751.507,
            "keystrokes": 1815,
            "attempts": 17,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findDrivers (list_drivers, list_teams, list_budget):\n    aDict = {}\n    newList = []\n    for index,team in enumerate(list_teams):\n        price = int(list_budget[index])\n        newList.append((team, price))\n    \n    for teams, budget in newList:\n        for driver, paycheck in list_drivers:\n            if paycheck <= int(budget):\n                if teams in aDict:\n                    aDict[teams].append(driver)\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = [driver]\n                    aDict[teams].sort()\n            else:\n                if teams in aDict:\n                    aDict[teams] += []\n                    aDict[teams].sort()\n                else:\n                    aDict[teams] = []\n                    aDict[teams].sort()\n    return aDict\n        ",
            "durations": 751.507,
            "keystrokes": 1815,
            "attempts": 17,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 3,
            "current_problem": 21
        },
        "action": 21,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for item in inventions:\n        for invention, boolean in item:\n            if boolean == True:\n                count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\nprint(numInventions(inventions))\nprint(numInventions(inventions))\n    ",
            "durations": 221.719,
            "keystrokes": 403,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for item in inventions:\n        for invention, boolean in item:\n            if boolean == True:\n                count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 253.606,
            "keystrokes": 718,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for item in inventions:\n        for invention, boolean in item:\n            if boolean == True:\n                count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 253.606,
            "keystrokes": 718,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for item in inventions:\n        for invention, boolean in item.items():\n            if boolean == True:\n                count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 270.224,
            "keystrokes": 726,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for item in inventions:\n        for invention, boolean in item.items():\n            if boolean == True:\n                count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 270.224,
            "keystrokes": 726,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for invention, boolean in inventions:\n        if boolean == True:\n            count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 324.906,
            "keystrokes": 800,
            "attempts": 4,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for invention, boolean in inventions:\n        if boolean == True:\n            count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 324.906,
            "keystrokes": 800,
            "attempts": 4,
            "test_case_accuracy": 0.4,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for invention, boolean in inventions:\n        if boolean == True:\n            count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n    else: \n        return count\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 370.104,
            "keystrokes": 840,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inventions): \n    count = 0\n    for invention, boolean in inventions:\n        if boolean == True:\n            count += 1\n    if count == 0:\n        return \"We still have 104 days to invent something!\"\n    else: \n        return count\n        \n        \ninventions = [[\"Time Machine\", True], [\"Anti-Gravity Ray\", False], [\"Giant Rollercoaster\", True], [\"Shrinkinator\", False]]\nprint(numInventions(inventions))\n\ninventions = [[\"Super Robot\", True], [\"Invisible Cloak\", True], [\"Teleportation Device\", True], [\"Mind-Reading Helmet\", True], [\"Laser Beam Glasses\", True]]\nprint(numInventions(inventions))\n    ",
            "durations": 370.104,
            "keystrokes": 840,
            "attempts": 5,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "action": 20,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    print(\"Coffees left:num\")\n    if num == 0:\n        print(\"No more coffee!\")\n        return 0\n        \n    else:\n        num = num-1\n",
            "durations": 109.199,
            "keystrokes": 245,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    print(f\"Coffees left:{num}\")\n    if num == 0:\n        print(\"No more coffee!\")\n        return 0\n        \n    else:\n        numCoffees(num-1)\n",
            "durations": 151.703,
            "keystrokes": 260,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    print(f\"Coffees left:{num}\")\n    if num == 0:\n        print(\"No more coffee!\")\n        return 0\n        \n    else:\n        numCoffees(num-1)\n",
            "durations": 151.703,
            "keystrokes": 260,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    print(f\"Coffees left:{num}\")\n    if num == 0:\n        print(\"No more coffee!\")\n    else:\n        numCoffees(num-1)\n",
            "durations": 720.407,
            "keystrokes": 286,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    print(f\"Coffees left:{num}\")\n    if num == 0:\n        print(\"No more coffee!\")\n    else:\n        numCoffees(num-1)\n",
            "durations": 720.407,
            "keystrokes": 286,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rlist = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0] has too many fouls}\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    \n    return rList\n    ",
            "durations": 407.008,
            "keystrokes": 502,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rlist = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    \n    return rList\n    ",
            "durations": 427.877,
            "keystrokes": 504,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rlist = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    \n    return rList\n    ",
            "durations": 427.877,
            "keystrokes": 504,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rlist = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    \n    return rList\n    foulCount(tList[1:])\n    ",
            "durations": 447.653,
            "keystrokes": 531,
            "attempts": 3,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rlist = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    \n    return rList\n    foulCount(tList[1:])\n    ",
            "durations": 447.653,
            "keystrokes": 531,
            "attempts": 3,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rlist = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 454.921,
            "keystrokes": 571,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rlist = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 454.921,
            "keystrokes": 571,
            "attempts": 4,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 461.815,
            "keystrokes": 573,
            "attempts": 5,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"rList[0][0] has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 461.815,
            "keystrokes": 573,
            "attempts": 5,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"{rList[0][0]} has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 500.437,
            "keystrokes": 575,
            "attempts": 6,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList.append(f\"{rList[0][0]} has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 500.437,
            "keystrokes": 575,
            "attempts": 6,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList[0].append(f\"{rList[0][0]} has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 547.433,
            "keystrokes": 578,
            "attempts": 7,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    if tList[0][1] > 25:\n        rList[0].append(f\"{rList[0][0]} has too many fouls\")\n        rList[1] += tList[0][1]\n    elif tList[0][1]<0:\n        rList[0].append(f\"{rList[0][0]} has an incorrect foul count\")\n        rList[1] += tList[0][1]\n    else:\n        rList[1] += tList[0][1]\n    foulCount(tList[1:])\n    return rList\n    \n    ",
            "durations": 547.433,
            "keystrokes": 578,
            "attempts": 7,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    team,foul = tList[0]\n    rList[1] += foul\n    if foul > 25:\n        rList[0].append(f\"{team} has too many fouls!\")\n    \n    elif foul < 0:\n        rList[0].append(f\"team\" has an incorrect foul count.)\n    return rList",
            "durations": 760.053,
            "keystrokes": 1234,
            "attempts": 8,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    team,foul = tList[0]\n    rList[1] += foul\n    if foul > 25:\n        rList[0].append(f\"{team} has too many fouls!\")\n    \n    elif foul < 0:\n        rList[0].append(f\"team\" has an incorrect foul count.)\n    return rList",
            "durations": 760.053,
            "keystrokes": 1234,
            "attempts": 8,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    team,foul = tList[0]\n    rList[1] += foul\n    if foul > 25:\n        rList[0].append(f\"{team} has too many fouls!\")\n    \n    elif foul < 0:\n        rList[0].append(f\"{team} has an incorrect foul count.\")\n    return rList",
            "durations": 778.418,
            "keystrokes": 1238,
            "attempts": 9,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foulCount(tList):\n    if not tList:\n        return [[],0]\n    rList = foulCount(tList[1:])\n    team,foul = tList[0]\n    rList[1] += foul\n    if foul > 25:\n        rList[0].append(f\"{team} has too many fouls!\")\n    \n    elif foul < 0:\n        rList[0].append(f\"{team} has an incorrect foul count.\")\n    return rList",
            "durations": 778.418,
            "keystrokes": 1238,
            "attempts": 9,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 22
        },
        "action": 22,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return 0\n    else:\n        print(f'Coffees left: {num})\n        return numCoffees(num-1)",
            "durations": 66.753,
            "keystrokes": 156,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 104.827,
            "keystrokes": 171,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 104.827,
            "keystrokes": 171,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 129.956,
            "keystrokes": 172,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 129.956,
            "keystrokes": 172,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if not num:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 149.776,
            "keystrokes": 182,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if not num:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 149.776,
            "keystrokes": 182,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 197.889,
            "keystrokes": 190,
            "attempts": 5,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return 0\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 197.889,
            "keystrokes": 190,
            "attempts": 5,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return []\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 328.325,
            "keystrokes": 193,
            "attempts": 6,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return []\n    else:\n        print(f'Coffees left: {num}')\n        return numCoffees(num-1)",
            "durations": 328.325,
            "keystrokes": 193,
            "attempts": 6,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return []\n    else:\n        return f'Coffees left: {num}'+ numCoffees(num-1)",
            "durations": 366.046,
            "keystrokes": 221,
            "attempts": 7,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return []\n    else:\n        return f'Coffees left: {num}'+ numCoffees(num-1)",
            "durations": 366.046,
            "keystrokes": 221,
            "attempts": 7,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return []\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 385.918,
            "keystrokes": 223,
            "attempts": 8,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return []\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 385.918,
            "keystrokes": 223,
            "attempts": 8,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return ['No more Coffee']\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 424.55,
            "keystrokes": 251,
            "attempts": 9,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return ['No more Coffee']\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 424.55,
            "keystrokes": 251,
            "attempts": 9,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return ['No more coffee!']\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 468.258,
            "keystrokes": 254,
            "attempts": 10,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num < 0:\n        return ['No more coffee!']\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 468.258,
            "keystrokes": 254,
            "attempts": 10,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee!']\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 488.537,
            "keystrokes": 255,
            "attempts": 11,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return ['No more coffee!']\n    else:\n        return [f'Coffees left: {num}']+ numCoffees(num-1)",
            "durations": 488.537,
            "keystrokes": 255,
            "attempts": 11,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def decryptyValentine(mess,key):\n    ans = \"\"\n    for i in range(len(mess)):\n        if i % key == 0:\n            ans += mess[i]\n    return ans[::-1]",
            "durations": 78.0693,
            "keystrokes": 203,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(mess,key):\n    ans = \"\"\n    for i in range(len(mess)):\n        if i % key == 0:\n            ans += mess[i]\n    return ans[::-1]",
            "durations": 88.6013,
            "keystrokes": 204,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(mess,key):\n    ans = \"\"\n    for i in range(len(mess)):\n        if i % key == 0:\n            ans += mess[i]\n    return ans[::-1]",
            "durations": 88.6013,
            "keystrokes": 204,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 18
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(sent):\n    Up = 0\n    Low = 0\n    for s in sent:\n        if s.isalpha():\n            if s.isupper():\n                Up += 1\n            else:\n                Low += 1\n    if Up > Low:\n        return f\"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif Up < Low:\n        return f\"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"\n        return ",
            "durations": 149.424,
            "keystrokes": 604,
            "attempts": 1,
            "test_case_accuracy": 0.6,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(sent):\n    Up = 0\n    Low = 0\n    for s in sent:\n        if s.isalpha():\n            if s.isupper():\n                Up += 1\n            else:\n                Low += 1\n    if Up > Low:\n        return f\"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif Up < Low:\n        return f\"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"\n        return ",
            "durations": 149.424,
            "keystrokes": 604,
            "attempts": 1,
            "test_case_accuracy": 0.6,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(sent):\n    Up = 0\n    Low = 0\n    for s in sent:\n        if s.isalpha():\n            if s.isupper():\n                Up += 1\n            else:\n                Low += 1\n    if Up > Low:\n        return f\"Darling, I need {Up - Low} more lowercase character(s) in our love story.\"\n    elif Up < Low:\n        return f\"Sweetheart, I need {Low - Up} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"\n        return ",
            "durations": 194.352,
            "keystrokes": 642,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(sent):\n    Up = 0\n    Low = 0\n    for s in sent:\n        if s.isalpha():\n            if s.isupper():\n                Up += 1\n            else:\n                Low += 1\n    if Up > Low:\n        return f\"Darling, I need {Up - Low} more lowercase character(s) in our love story.\"\n    elif Up < Low:\n        return f\"Sweetheart, I need {Low - Up} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"\n        return ",
            "durations": 194.352,
            "keystrokes": 642,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 9,
            "current_problem": 17
        },
        "action": 19,
        "next_state": {
            "submission_history": "def findLove(can,fav,colors):\n    rlist = []\n    for info in can:\n        if fav == info[1] and info[2] in colors:\n            rlist.append(info[0])\n    return sorted(rlist)",
            "durations": 133.654,
            "keystrokes": 211,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 19
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def findLove(can,fav,colors):\n    rlist = []\n    for info in can:\n        if fav == info[1] and info[2] in colors:\n            rlist.append(info[0])\n    return sorted(rlist)",
            "durations": 133.654,
            "keystrokes": 211,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 19
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(ylist,flist):\n    rlist = []\n    for place in ylist:\n        if place in flist:\n            rlist.append(place)\n    if rlist:\n        return rlist:\n    else: \n        return \"Whatever, we'll go to Nave.\"",
            "durations": 137.297,
            "keystrokes": 277,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(ylist,flist):\n    rlist = []\n    for place in ylist:\n        if place in flist:\n            rlist.append(place)\n    if rlist:\n        return rlist:\n    else: \n        return \"Whatever, we'll go to Nave.\"",
            "durations": 137.297,
            "keystrokes": 277,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(ylist,flist):\n    rlist = []\n    for place in ylist:\n        if place in flist:\n            rlist.append(place)\n    if rlist:\n        return rlist\n    else: \n        return \"Whatever, we'll go to Nave.\"",
            "durations": 151.295,
            "keystrokes": 278,
            "attempts": 2,
            "test_case_accuracy": 0.8,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(ylist,flist):\n    rlist = []\n    for place in ylist:\n        if place in flist:\n            rlist.append(place)\n    if rlist:\n        return rlist\n    else: \n        return \"Whatever, we'll go to Nave.\"",
            "durations": 151.295,
            "keystrokes": 278,
            "attempts": 2,
            "test_case_accuracy": 0.8,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(ylist,flist):\n    rlist = []\n    for place in ylist:\n        if place in flist:\n            rlist.append(place)\n    if rlist:\n        return sorted(rlist)\n    else: \n        return \"Whatever, we'll go to Nave.\"",
            "durations": 163.595,
            "keystrokes": 286,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(ylist,flist):\n    rlist = []\n    for place in ylist:\n        if place in flist:\n            rlist.append(place)\n    if rlist:\n        return sorted(rlist)\n    else: \n        return \"Whatever, we'll go to Nave.\"",
            "durations": 163.595,
            "keystrokes": 286,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 6,
            "current_problem": 1
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInvenions(inv):\n    num = 0\n    for info in inv:\n        if info[1]:\n            num += 1\n    if num:\n        return num \n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 79.2421,
            "keystrokes": 265,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInvenions(inv):\n    num = 0\n    for info in inv:\n        if info[1]:\n            num += 1\n    if num:\n        return num \n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 79.2421,
            "keystrokes": 265,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "action": 20,
        "next_state": {
            "submission_history": "def numInventions(inv):\n    num = 0\n    for info in inv:\n        if info[1]:\n            num += 1\n    if num:\n        return num \n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 101.659,
            "keystrokes": 266,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numInventions(inv):\n    num = 0\n    for info in inv:\n        if info[1]:\n            num += 1\n    if num:\n        return num \n    else:\n        return \"We still have 104 days to invent something!\"",
            "durations": 101.659,
            "keystrokes": 266,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 2,
            "topic": 10,
            "current_problem": 20
        },
        "action": 6,
        "next_state": {
            "submission_history": "def foreignFilms(mlist):\n    mfile = oepn(\"movies.txt\",\"r\")\n    header = mfile.readline()\n    1header = mfile.readline()\n    cont = mfile.read().split(\"\\n\")\n    rdict = {}\n    for m in mlist:\n        name = m[0]\n        coun = m[1]\n        rdict[name] = []\n        for i in range(len(cont)):\n            if coun == cont[i]:\n                rdict[name].append(cont[i-1])\n                rdict[name].sort()\n    return rdict\n    \n    ",
            "durations": 536.25,
            "keystrokes": 903,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 4,
            "current_problem": 6
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foreignFilms(mlist):\n    mfile = oepn(\"movies.txt\",\"r\")\n    header = mfile.readline()\n    1header = mfile.readline()\n    cont = mfile.read().split(\"\\n\")\n    rdict = {}\n    for m in mlist:\n        name = m[0]\n        coun = m[1]\n        rdict[name] = []\n        for i in range(len(cont)):\n            if coun == cont[i]:\n                rdict[name].append(cont[i-1])\n                rdict[name].sort()\n    return rdict\n    \n    ",
            "durations": 536.25,
            "keystrokes": 903,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 4,
            "current_problem": 6
        },
        "action": 6,
        "next_state": {
            "submission_history": "def foreignFilms(mlist):\n    mfile = oepn(\"movies.txt\",\"r\")\n    mfile.readline()\n    mfile.readline()\n    cont = mfile.read().split(\"\\n\")\n    mfile.close()\n    rdict = {}\n    for m in mlist:\n        name = m[0]\n        coun = m[1]\n        rdict[name] = []\n        for i in range(len(cont)):\n            if coun == cont[i]:\n                rdict[name].append(cont[i-1])\n                rdict[name].sort()\n    return rdict\n    \n    ",
            "durations": 843.581,
            "keystrokes": 942,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 4,
            "current_problem": 6
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foreignFilms(mlist):\n    mfile = oepn(\"movies.txt\",\"r\")\n    mfile.readline()\n    mfile.readline()\n    cont = mfile.read().split(\"\\n\")\n    mfile.close()\n    rdict = {}\n    for m in mlist:\n        name = m[0]\n        coun = m[1]\n        rdict[name] = []\n        for i in range(len(cont)):\n            if coun == cont[i]:\n                rdict[name].append(cont[i-1])\n                rdict[name].sort()\n    return rdict\n    \n    ",
            "durations": 843.581,
            "keystrokes": 942,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 4,
            "current_problem": 6
        },
        "action": 6,
        "next_state": {
            "submission_history": "def foreignFilms(mlist):\n    mfile = open(\"movies.txt\",\"r\")\n    mfile.readline()\n    mfile.readline()\n    cont = mfile.read().split(\"\\n\")\n    mfile.close()\n    rdict = {}\n    for m in mlist:\n        name = m[0]\n        coun = m[1]\n        rdict[name] = []\n        for i in range(len(cont)):\n            if coun == cont[i]:\n                rdict[name].append(cont[i-1])\n                rdict[name].sort()\n    return rdict\n    \n    ",
            "durations": 851.495,
            "keystrokes": 944,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 4,
            "current_problem": 6
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foreignFilms(mlist):\n    mfile = open(\"movies.txt\",\"r\")\n    mfile.readline()\n    mfile.readline()\n    cont = mfile.read().split(\"\\n\")\n    mfile.close()\n    rdict = {}\n    for m in mlist:\n        name = m[0]\n        coun = m[1]\n        rdict[name] = []\n        for i in range(len(cont)):\n            if coun == cont[i]:\n                rdict[name].append(cont[i-1])\n                rdict[name].sort()\n    return rdict\n    \n    ",
            "durations": 851.495,
            "keystrokes": 944,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 4,
            "current_problem": 6
        },
        "action": 6,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def decryptValentine(msg, key):\n    newStr = \"\"\n    for i in range(0,len(msg),key):\n        newStr += i\n    newStr.reverse()",
            "durations": 46.1674,
            "keystrokes": 142,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 9,
            "current_problem": 18
        },
        "action": 18,
        "next_state": {
            "submission_history": "def decryptValentine(msg, key):\n    newStr = \"\"\n    for i in range(0,len(msg),key):\n        newStr += msg[i]\n    newStr = newStr.reverse()",
            "durations": 47.084,
            "keystrokes": 148,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 9,
            "current_problem": 18
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def decryptValentine(msg, key):\n    newStr = \"\"\n    for i in range(0,len(msg),key):\n        newStr += msg[i]\n    newStr = newStr.reverse()",
            "durations": 47.084,
            "keystrokes": 148,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 9,
            "current_problem": 18
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(sentence):\n    upLetter = 0\n    lowLetter = 0\n    for item in sentence:\n        if item.isUpper():\n            upLetter += 1\n        elif item.isLower():\n            lowLetter += 1\n    if upLetter > lowLetter:\n        return \"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowLetter > upLetter:\n        return \"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 160.979,
            "keystrokes": 591,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(sentence):\n    upLetter = 0\n    lowLetter = 0\n    for item in sentence:\n        if item.isUpper():\n            upLetter += 1\n        elif item.isLower():\n            lowLetter += 1\n    if upLetter > lowLetter:\n        return \"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowLetter > upLetter:\n        return \"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 160.979,
            "keystrokes": 591,
            "attempts": 1,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 9,
            "current_problem": 17
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(sentence):\n    upLetter = 0\n    lowLetter = 0\n    for item in sentence:\n        if item.isAlpha():\n            if item.isUpper():\n                upLetter += 1\n            elif item.isLower():\n                lowLetter += 1\n        else:\n            continue\n    if upLetter > lowLetter:\n        return \"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowLetter > upLetter:\n        return \"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 203.681,
            "keystrokes": 723,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(sentence):\n    upLetter = 0\n    lowLetter = 0\n    for item in sentence:\n        if item.isAlpha():\n            if item.isUpper():\n                upLetter += 1\n            elif item.isLower():\n                lowLetter += 1\n        else:\n            continue\n    if upLetter > lowLetter:\n        return \"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowLetter > upLetter:\n        return \"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 203.681,
            "keystrokes": 723,
            "attempts": 2,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 9,
            "current_problem": 17
        },
        "action": 17,
        "next_state": {
            "submission_history": "def countCase(sentence):\n    upLetter = 0\n    lowLetter = 0\n    for item in sentence:\n        if item.isalpha():\n            if item.isupper():\n                upLetter += 1\n            elif item.islower():\n                lowLetter += 1\n        else:\n            continue\n    if upLetter > lowLetter:\n        return \"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowLetter > upLetter:\n        return \"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 268.455,
            "keystrokes": 727,
            "attempts": 3,
            "test_case_accuracy": 0.6,
            "difficulty": 5,
            "topic": 9,
            "current_problem": 17
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def countCase(sentence):\n    upLetter = 0\n    lowLetter = 0\n    for item in sentence:\n        if item.isalpha():\n            if item.isupper():\n                upLetter += 1\n            elif item.islower():\n                lowLetter += 1\n        else:\n            continue\n    if upLetter > lowLetter:\n        return \"Darling, I need {difference} more lowercase character(s) in our love story.\"\n    elif lowLetter > upLetter:\n        return \"Sweetheart, I need {difference} more uppercase character(s) in our love tale.\"\n    else:\n        return \"Our love story is perfectly balanced, just like us.\"",
            "durations": 268.455,
            "keystrokes": 727,
            "attempts": 3,
            "test_case_accuracy": 0.6,
            "difficulty": 5,
            "topic": 9,
            "current_problem": 17
        },
        "action": 1,
        "next_state": {
            "submission_history": "def sharedRestaurants(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sharedList.sort()",
            "durations": 121.995,
            "keystrokes": 335,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def sharedRestaurants(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sharedList.sort()",
            "durations": 121.995,
            "keystrokes": 335,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sharedList.sort()",
            "durations": 143.274,
            "keystrokes": 359,
            "attempts": 2,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        return sharedList.sort()",
            "durations": 143.274,
            "keystrokes": 359,
            "attempts": 2,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        sharedList = sharedList.sort()\n        return sharedList",
            "durations": 170.457,
            "keystrokes": 417,
            "attempts": 3,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        sharedList = sharedList.sort()\n        return sharedList",
            "durations": 170.457,
            "keystrokes": 417,
            "attempts": 3,
            "test_case_accuracy": 0.4,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "action": 1,
        "next_state": {
            "submission_history": "def eatingOut(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        sharedList.sort()\n        return sharedList",
            "durations": 187.618,
            "keystrokes": 430,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def eatingOut(myList, fList):\n    sharedList = []\n    for item in myList:\n        for place in fList:\n            if item == place:\n                sharedList.append(place)\n    if sharedList == []:\n        return \"Whatever, we'll go to Nave.\"\n    else:\n        sharedList.sort()\n        return sharedList",
            "durations": 187.618,
            "keystrokes": 430,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 6,
            "current_problem": 1
        },
        "action": 6,
        "next_state": {
            "submission_history": "def foreignFilms(movieList):\n    aDict = {}\n    ifile = open(\"movies.txt\", \"r\")\n    header = ifile.readline()\n    body = ifile.readlines()\n    ifile.close()\n    for aTup in movieList:\n        name = aTup[0]\n        place = aTup[1]\n        aDict[name] = []\n        for i in range(2,len(body)-2,5):\n            if body[i].strip() == place:\n                if name in aDict:\n                    aDict[name].append(body[i-1])\n                    aDict[name].sort()\n    return aDict\n        ",
            "durations": 496.695,
            "keystrokes": 808,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 4,
            "current_problem": 6
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foreignFilms(movieList):\n    aDict = {}\n    ifile = open(\"movies.txt\", \"r\")\n    header = ifile.readline()\n    body = ifile.readlines()\n    ifile.close()\n    for aTup in movieList:\n        name = aTup[0]\n        place = aTup[1]\n        aDict[name] = []\n        for i in range(2,len(body)-2,5):\n            if body[i].strip() == place:\n                if name in aDict:\n                    aDict[name].append(body[i-1])\n                    aDict[name].sort()\n    return aDict\n        ",
            "durations": 496.695,
            "keystrokes": 808,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 4,
            "current_problem": 6
        },
        "action": 6,
        "next_state": {
            "submission_history": "def foreignFilms(movieList):\n    aDict = {}\n    ifile = open(\"files/movies.txt\", \"r\")\n    header = ifile.readline()\n    body = ifile.readlines()\n    ifile.close()\n    for aTup in movieList:\n        name = aTup[0]\n        place = aTup[1]\n        aDict[name] = []\n        for i in range(2,len(body)-2,5):\n            if body[i].strip() == place:\n                if name in aDict:\n                    aDict[name].append(body[i-1])\n                    aDict[name].sort()\n    return aDict\n        ",
            "durations": 514.081,
            "keystrokes": 816,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 4,
            "current_problem": 6
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foreignFilms(movieList):\n    aDict = {}\n    ifile = open(\"files/movies.txt\", \"r\")\n    header = ifile.readline()\n    body = ifile.readlines()\n    ifile.close()\n    for aTup in movieList:\n        name = aTup[0]\n        place = aTup[1]\n        aDict[name] = []\n        for i in range(2,len(body)-2,5):\n            if body[i].strip() == place:\n                if name in aDict:\n                    aDict[name].append(body[i-1])\n                    aDict[name].sort()\n    return aDict\n        ",
            "durations": 514.081,
            "keystrokes": 816,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 4,
            "current_problem": 6
        },
        "action": 6,
        "next_state": {
            "submission_history": "def foreignFilms(movieList):\n    aDict = {}\n    ifile = open(\"files/movies.txt\", \"r\")\n    header = ifile.readline()\n    body = ifile.readlines()\n    ifile.close()\n    for aTup in movieList:\n        name = aTup[0]\n        place = aTup[1]\n        aDict[name] = []\n        for i in range(2,len(body)-2,5):\n            if body[i].strip() == place:\n                if name in aDict:\n                    aDict[name].append(body[i-1].strip())\n                    aDict[name].sort()\n    return aDict\n        ",
            "durations": 534.439,
            "keystrokes": 824,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 4,
            "current_problem": 6
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def foreignFilms(movieList):\n    aDict = {}\n    ifile = open(\"files/movies.txt\", \"r\")\n    header = ifile.readline()\n    body = ifile.readlines()\n    ifile.close()\n    for aTup in movieList:\n        name = aTup[0]\n        place = aTup[1]\n        aDict[name] = []\n        for i in range(2,len(body)-2,5):\n            if body[i].strip() == place:\n                if name in aDict:\n                    aDict[name].append(body[i-1].strip())\n                    aDict[name].sort()\n    return aDict\n        ",
            "durations": 534.439,
            "keystrokes": 824,
            "attempts": 3,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 4,
            "current_problem": 6
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return \"No more coffee!\"\n    else:\n        print(\"Coffes left: {}\".format(num))\n        return numCoffees(num-1)",
            "durations": 89.809,
            "keystrokes": 168,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return \"No more coffee!\"\n    else:\n        print(\"Coffes left: {}\".format(num))\n        return numCoffees(num-1)",
            "durations": 89.809,
            "keystrokes": 168,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return \"No more coffee!\"\n    else:\n        print(\"Coffes left: {}\".format(num))\n        return numCoffees(num-1)",
            "durations": 153.322,
            "keystrokes": 168,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return \"No more coffee!\"\n    else:\n        print(\"Coffes left: {}\".format(num))\n        return numCoffees(num-1)",
            "durations": 153.322,
            "keystrokes": 168,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return numCoffees(num-1) += [\"Coffees left: {}\".format(num)]\n        ",
            "durations": 217.771,
            "keystrokes": 310,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return numCoffees(num-1) += [\"Coffees left: {}\".format(num)]\n        ",
            "durations": 217.771,
            "keystrokes": 310,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return [\"Coffees left: {}\".format(num)] += numCoffees(num-1)\n        ",
            "durations": 252.019,
            "keystrokes": 382,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return [\"Coffees left: {}\".format(num)] += numCoffees(num-1)\n        ",
            "durations": 252.019,
            "keystrokes": 382,
            "attempts": 4,
            "test_case_accuracy": 0.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return numCoffees(num-1).append([\"Coffees left: {}\".format(num)])\n        \n        ",
            "durations": 353.096,
            "keystrokes": 470,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        return numCoffees(num-1).append([\"Coffees left: {}\".format(num)])\n        \n        ",
            "durations": 353.096,
            "keystrokes": 470,
            "attempts": 5,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        answer = [\"Coffees left: {}\".format(num)]\n        result = numCoffees(num-1)\n        answer.append(result)\n        return answer\n        \n        ",
            "durations": 509.148,
            "keystrokes": 643,
            "attempts": 6,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        answer = [\"Coffees left: {}\".format(num)]\n        result = numCoffees(num-1)\n        answer.append(result)\n        return answer\n        \n        ",
            "durations": 509.148,
            "keystrokes": 643,
            "attempts": 6,
            "test_case_accuracy": 0.2,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        answer = [\"Coffees left: {}\".format(num)]\n        result = numCoffees(num-1)\n        answer += result\n        return answer\n        \n        ",
            "durations": 567.364,
            "keystrokes": 768,
            "attempts": 7,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def numCoffees(num):\n    if num <= 0:\n        return [\"No more coffee!\"]\n    else:\n        answer = [\"Coffees left: {}\".format(num)]\n        result = numCoffees(num-1)\n        answer += result\n        return answer\n        \n        ",
            "durations": 567.364,
            "keystrokes": 768,
            "attempts": 7,
            "test_case_accuracy": 1.0,
            "difficulty": 5,
            "topic": 8,
            "current_problem": 10
        },
        "action": 10,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def atlCoffee(aList):\n    if aList = []:\n        return {}\n    name = aList[0]\n    area = aList[1]\n    rating = aList[2]\n    newDict = atlCoffee(aList[1:])\n    if rating > 5:\n        if area in newDict:\n            newDict[area].append(name)\n            newDict[area].sort()\n        else:\n            newDict[area] = [name]\n    else:\n        return {}\n    return newDict\n        \n        ",
            "durations": 456.133,
            "keystrokes": 542,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(aList):\n    if aList == []:\n        return {}\n    name = aList[0]\n    area = aList[1]\n    rating = aList[2]\n    newDict = atlCoffee(aList[1:])\n    if rating > 5:\n        if area in newDict:\n            newDict[area].append(name)\n            newDict[area].sort()\n        else:\n            newDict[area] = [name]\n    else:\n        return {}\n    return newDict\n        \n        ",
            "durations": 463.572,
            "keystrokes": 543,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(aList):\n    if aList == []:\n        return {}\n    name = aList[0]\n    area = aList[1]\n    rating = aList[2]\n    newDict = atlCoffee(aList[1:])\n    if rating > 5:\n        if area in newDict:\n            newDict[area].append(name)\n            newDict[area].sort()\n        else:\n            newDict[area] = [name]\n    else:\n        return {}\n    return newDict\n        \n        ",
            "durations": 463.572,
            "keystrokes": 543,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(aList):\n    if aList == []:\n        return {}\n    name = aList[0]\n    area = aList[1]\n    rating = aList[2]\n    newDict = atlCoffee(aList[1:])\n    if rating > 5:\n        if area in newDict:\n            newDict[area].append(name)\n            newDict[area].sort()\n        else:\n            newDict[area] = [name]\n    \n    return newDict\n        \n        ",
            "durations": 528.195,
            "keystrokes": 566,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(aList):\n    if aList == []:\n        return {}\n    name = aList[0]\n    area = aList[1]\n    rating = aList[2]\n    newDict = atlCoffee(aList[1:])\n    if rating > 5:\n        if area in newDict:\n            newDict[area].append(name)\n            newDict[area].sort()\n        else:\n            newDict[area] = [name]\n    \n    return newDict\n        \n        ",
            "durations": 528.195,
            "keystrokes": 566,
            "attempts": 3,
            "test_case_accuracy": 0.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": {
            "submission_history": "def atlCoffee(aList):\n    if aList == []:\n        return {}\n    name = aList[0][0]\n    area = aList[0][1]\n    rating = aList[0][2]\n    newDict = atlCoffee(aList[1:])\n    if rating > 5:\n        if area in newDict:\n            newDict[area].append(name)\n            newDict[area].sort()\n        else:\n            newDict[area] = [name]\n    else:\n        return {}\n    return newDict\n        \n        ",
            "durations": 621.909,
            "keystrokes": 674,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def atlCoffee(aList):\n    if aList == []:\n        return {}\n    name = aList[0][0]\n    area = aList[0][1]\n    rating = aList[0][2]\n    newDict = atlCoffee(aList[1:])\n    if rating > 5:\n        if area in newDict:\n            newDict[area].append(name)\n            newDict[area].sort()\n        else:\n            newDict[area] = [name]\n    else:\n        return {}\n    return newDict\n        \n        ",
            "durations": 621.909,
            "keystrokes": 674,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 3,
            "topic": 8,
            "current_problem": 11
        },
        "action": 11,
        "next_state": null,
        "done": true
    },
    {
        "state": {
            "submission_history": "def toCook(numC,dine):\n    if numC > 3 and dine > 10:\n        return \"Let's get Panda Express!\"\n    elif numC <= 3 and dine >= 50:\n        return \"Let's splurge on Chick-fil-A!\"\n    else:\n        return \"Guess I'll have to cook myself.\"\n        ",
            "durations": 219.155,
            "keystrokes": 315,
            "attempts": 1,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 12
        },
        "action": 13,
        "next_state": {
            "submission_history": "def cookingClass(date,onw):\n    avail = None\n    if date % 2 != 0:\n        if onw:\n            return f\"Let's check if there is a cooking class on day{date}!\"\n        else:\n            return f\"Let's go cooking on day {date}!\"\n    else:\n        if onw:\n            return f\"Let's go cooking on day {date}!\"\n        else:\n            return \"Let's plan for some other day.\"",
            "durations": 231.861,
            "keystrokes": 540,
            "attempts": 1,
            "test_case_accuracy": 0.6,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 13
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def cookingClass(date,onw):\n    avail = None\n    if date % 2 != 0:\n        if onw:\n            return f\"Let's check if there is a cooking class on day{date}!\"\n        else:\n            return f\"Let's go cooking on day {date}!\"\n    else:\n        if onw:\n            return f\"Let's go cooking on day {date}!\"\n        else:\n            return \"Let's plan for some other day.\"",
            "durations": 231.861,
            "keystrokes": 540,
            "attempts": 1,
            "test_case_accuracy": 0.6,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 13
        },
        "action": 13,
        "next_state": {
            "submission_history": "def cookingClass(date,onw):\n    avail = None\n    if date % 2 != 0:\n        if onw:\n            return f\"Let's check if there is a cooking class on day {date}!\"\n        else:\n            return f\"Let's go cooking on day {date}!\"\n    else:\n        if onw:\n            return f\"Let's go cooking on day {date}!\"\n        else:\n            return \"Let's plan for some other day.\"",
            "durations": 268.27,
            "keystrokes": 541,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 13
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def cookingClass(date,onw):\n    avail = None\n    if date % 2 != 0:\n        if onw:\n            return f\"Let's check if there is a cooking class on day {date}!\"\n        else:\n            return f\"Let's go cooking on day {date}!\"\n    else:\n        if onw:\n            return f\"Let's go cooking on day {date}!\"\n        else:\n            return \"Let's plan for some other day.\"",
            "durations": 268.27,
            "keystrokes": 541,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 2,
            "current_problem": 13
        },
        "action": 14,
        "next_state": {
            "submission_history": "def jumbledMessage(mess):\n    new = \"\"\n    for i in range(len(mess)):\n        if i % 2 == 0:\n            if mess[i].isalpha():\n                new += mess[i]\n                \n    return new",
            "durations": 304.195,
            "keystrokes": 245,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def jumbledMessage(mess):\n    new = \"\"\n    for i in range(len(mess)):\n        if i % 2 == 0:\n            if mess[i].isalpha():\n                new += mess[i]\n                \n    return new",
            "durations": 304.195,
            "keystrokes": 245,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "action": 14,
        "next_state": {
            "submission_history": "def demystifyMessage(mess):\n    new = \"\"\n    for i in range(len(mess)):\n        if i % 2 == 0:\n            if mess[i].isalpha():\n                new += mess[i]\n                \n    return new",
            "durations": 319.03,
            "keystrokes": 247,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def demystifyMessage(mess):\n    new = \"\"\n    for i in range(len(mess)):\n        if i % 2 == 0:\n            if mess[i].isalpha():\n                new += mess[i]\n                \n    return new",
            "durations": 319.03,
            "keystrokes": 247,
            "attempts": 2,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 14
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(dstr):\n    dstr = dstr [::-1]\n    for d in dstr:\n        if d == \"L\":\n            print(\"Turn left!\")\n        elif d == \"R\":\n            print(\"Turn right!\")\n        elif d == \"W\":\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 333.803,
            "keystrokes": 384,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(dstr):\n    dstr = dstr [::-1]\n    for d in dstr:\n        if d == \"L\":\n            print(\"Turn left!\")\n        elif d == \"R\":\n            print(\"Turn right!\")\n        elif d == \"W\":\n            return \"Poseidon is my dad?!\"\n    return \"Made it back!\"",
            "durations": 333.803,
            "keystrokes": 384,
            "attempts": 1,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(directions):\n    for step in reversed(directions):\n        if step == 'L':\n            print(\"Turn left!\")\n        elif step == 'R':\n            print(\"Turn right!\")\n        elif step == 'W':\n            return 'Poseidon is my dad?!'\n    return 'Made it back!'",
            "durations": 407.191,
            "keystrokes": 395,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(directions):\n    for step in reversed(directions):\n        if step == 'L':\n            print(\"Turn left!\")\n        elif step == 'R':\n            print(\"Turn right!\")\n        elif step == 'W':\n            return 'Poseidon is my dad?!'\n    return 'Made it back!'",
            "durations": 407.191,
            "keystrokes": 395,
            "attempts": 2,
            "test_case_accuracy": 0.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(dstr):\n    reply =[]\n    dstr = dstr[::-1]\n    for d in dstr:\n        if d == \"L\":\n            reply.appned(\"Turn left!\")\n        elif d == \"R\":\n            reply.append(\"Turn right!\")\n        elif d == \"W\":\n            reply.append(\"Poseidon is my dad?!\")\n            return reply\n    reply.append(\"Made it back!\")\n    return reply",
            "durations": 672.824,
            "keystrokes": 1083,
            "attempts": 3,
            "test_case_accuracy": 0.8,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(dstr):\n    reply =[]\n    dstr = dstr[::-1]\n    for d in dstr:\n        if d == \"L\":\n            reply.appned(\"Turn left!\")\n        elif d == \"R\":\n            reply.append(\"Turn right!\")\n        elif d == \"W\":\n            reply.append(\"Poseidon is my dad?!\")\n            return reply\n    reply.append(\"Made it back!\")\n    return reply",
            "durations": 672.824,
            "keystrokes": 1083,
            "attempts": 3,
            "test_case_accuracy": 0.8,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": {
            "submission_history": "def captureTheFlag(dstr):\n    reply =[]\n    dstr = dstr[::-1]\n    for d in dstr:\n        if d == \"L\":\n            reply.append(\"Turn left!\")\n        elif d == \"R\":\n            reply.append(\"Turn right!\")\n        elif d == \"W\":\n            reply.append(\"Poseidon is my dad?!\")\n            return reply\n    reply.append(\"Made it back!\")\n    return reply",
            "durations": 684.534,
            "keystrokes": 1085,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "done": false
    },
    {
        "state": {
            "submission_history": "def captureTheFlag(dstr):\n    reply =[]\n    dstr = dstr[::-1]\n    for d in dstr:\n        if d == \"L\":\n            reply.append(\"Turn left!\")\n        elif d == \"R\":\n            reply.append(\"Turn right!\")\n        elif d == \"W\":\n            reply.append(\"Poseidon is my dad?!\")\n            return reply\n    reply.append(\"Made it back!\")\n    return reply",
            "durations": 684.534,
            "keystrokes": 1085,
            "attempts": 4,
            "test_case_accuracy": 1.0,
            "difficulty": 1,
            "topic": 5,
            "current_problem": 15
        },
        "action": 15,
        "next_state": null,
        "done": true
    }
]